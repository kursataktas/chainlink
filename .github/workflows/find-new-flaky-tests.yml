name: Find New Flaky Tests

on:
  workflow_call:
    inputs:
      baseRef:
        required: true
        type: string
        description: 'The base reference or branch to compare changes for detecting flaky tests.'
      runCount:
        required: false
        type: string
        description: 'The number of times to run the tests to detect flaky tests.'
        default: '5'
      runThreshold:
        required: false
        type: string
        description: 'The threshold for the number of times a test can fail before being considered flaky.'
        default: '0.8'
      runWithRace:
        required: false
        type: boolean
        description: 'Run tests with -race flag.'
        default: true
      maxGroupSize:
        required: false
        type: string
        description: 'The maximum number of jobs to run in parallel when running tests.'
        default: '8'  

jobs:
  find-tests:
    name: Find new or updated test packages
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.split-packages.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
        with:
          fetch-depth: 0

      - name: Set up Go 1.21.9
        uses: actions/setup-go@v3
        with:
          go-version: '1.21.9'

      - name: Install flakeguard
        shell: bash
        run: go install github.com/smartcontractkit/chainlink-testing-framework/tools/flakeguard@7a091567328b88d44c91b2a058a67398ee06c4ae

      - name: Find new or updated test packages
        id: find-tests
        shell: bash
        env:
          # Needed to run go test -list
          CL_DATABASE_URL: postgresql://postgres@localhost:5432/chainlink_test?sslmode=disable
        run: |
          PATH=$PATH:$(go env GOPATH)/bin
          export PATH

          PACKAGES=$(flakeguard find --find-by-test-files-diff=true --find-by-affected-packages=true --base-ref=${{ inputs.baseRef }})
          echo $PACKAGES
          echo "packages=$PACKAGES" >> $GITHUB_OUTPUT

      - name: Split test packages into groups
        id: split-packages
        shell: bash
        run: |
          PACKAGES=(${{ steps.find-tests.outputs.packages }})
          DESIRED_GROUP_COUNT=$((${{ inputs.maxGroupSize }}))
          TOTAL_PACKAGES=${#PACKAGES[@]}

          # Number of groups should be no more than the number of packages
          MAX_GROUP_COUNT=$(($TOTAL_PACKAGES < $DESIRED_GROUP_COUNT ? $TOTAL_PACKAGES : $DESIRED_GROUP_COUNT))
          BASE_GROUP_SIZE=$(($TOTAL_PACKAGES / $MAX_GROUP_COUNT))
          EXTRA=$(($TOTAL_PACKAGES % $MAX_GROUP_COUNT))

          groups=()

          current_index=0
          for (( i=0; i < $MAX_GROUP_COUNT; i++ )); do
              # Determine the number of packages for the current group
              group_size=$BASE_GROUP_SIZE
              if [[ $i -lt $EXTRA ]]; then
                  group_size=$(($group_size + 1))
              fi
              
              # Extract the packages for the current group
              if [[ $group_size -gt 0 ]]; then
                  group=("${PACKAGES[@]:current_index:group_size}")
                  groups+=("$(IFS=,; echo "${group[*]}")")
                  current_index=$(($current_index + $group_size))
              fi
          done

          # Convert groups array into a JSON array
          json_groups=$(printf '%s\n' "${groups[@]}" | jq -R . | jq -cs .)
          echo $json_groups
          echo "matrix=$json_groups" >> $GITHUB_OUTPUT

  run-tests:
    name: Run tests to find flaky tests
    needs: find-tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: 
        testPackages: ${{ fromJson(needs.find-tests.outputs.matrix) }}
    env:
      DB_URL: postgresql://postgres:postgres@localhost:5432/chainlink_test?sslmode=disable
    steps:
      - name: Checkout repository
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2

      - name: Setup NodeJS
        uses: ./.github/actions/setup-nodejs
        with:
          prod: "true"
      - name: Setup Go
        uses: ./.github/actions/setup-go
      - name: Setup Solana
        uses: ./.github/actions/setup-solana
      - name: Setup wasmd
        uses: ./.github/actions/setup-wasmd
      - name: Setup Postgres
        uses: ./.github/actions/setup-postgres
      - name: Touching core/web/assets/index.html
        run: mkdir -p core/web/assets && touch core/web/assets/index.html
      - name: Download Go vendor packages
        run: go mod download
      - name: Build binary
        run: go build -o chainlink.test .
      - name: Setup DB
        run: ./chainlink.test local db preparetest
        env:
          CL_DATABASE_URL: ${{ env.DB_URL }}        
      - name: Install LOOP Plugins
        run: |
          pushd $(go list -m -f "{{.Dir}}" github.com/smartcontractkit/chainlink-feeds)
          go install ./cmd/chainlink-feeds
          popd
          pushd $(go list -m -f "{{.Dir}}" github.com/smartcontractkit/chainlink-data-streams)
          go install ./mercury/cmd/chainlink-mercury
          popd
          pushd $(go list -m -f "{{.Dir}}" github.com/smartcontractkit/chainlink-solana)
          go install ./pkg/solana/cmd/chainlink-solana
          popd
          pushd $(go list -m -f "{{.Dir}}" github.com/smartcontractkit/chainlink-starknet/relayer)
          go install ./pkg/chainlink/cmd/chainlink-starknet
          popd

      # - name: Setup Go
      #   uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 # v5.0.0
      #   with:
      #     check-latest: true        
      # - name: Setup test database
      #   shell: sh
      #   run: make setup-testdb
      # - name: Source database environment variables
      #   run: source .dbenv

      - name: Clean test cache
        run: go clean -testcache

      # - name: Set up Go 1.21.9
      #   uses: actions/setup-go@v3
      #   with:
      #     go-version: '1.21.9'        

      - name: Install flakeguard
        shell: bash
        run: go install github.com/smartcontractkit/chainlink-testing-framework/tools/flakeguard@7a091567328b88d44c91b2a058a67398ee06c4ae

      - name: Run tests for
        shell: bash
        run: flakeguard run --test-packages=${{ matrix.testPackages }} --run-count=${{ inputs.runCount }} --threshold=${{ inputs.runThreshold }} --race=${{ inputs.runWithRace }}
        env:
          CL_DATABASE_URL: ${{ env.DB_URL }}