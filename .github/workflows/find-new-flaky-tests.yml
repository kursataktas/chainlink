name: Find New Flaky Tests

on:
  workflow_call:
    inputs:
      baseRef:
        required: true
        type: string
        description: 'The base reference or branch to compare changes for detecting flaky tests.'
      runCount:
        required: false
        type: string
        description: 'The number of times to run the tests to detect flaky tests.'
        default: '5'
      runThreshold:
        required: false
        type: string
        description: 'The threshold for the number of times a test can fail before being considered flaky.'
        default: '0.8'
      runWithRace:
        required: false
        type: boolean
        description: 'Run tests with -race flag.'
        default: true
      maxGroupSize:
        required: false
        type: string
        description: 'The maximum number of jobs to run in parallel when running tests.'
        default: '8'
      findByTestFilesDiff:
        required: false
        type: boolean
        description: 'Find new or updated test packages by comparing test files diff.'
        default: true
      findByAffectedPackages:
        required: false
        type: boolean
        description: 'Find new or updated test packages by comparing affected packages.'
        default: true
      slack_notification_after_tests_channel_id:
        description: "Slack channel ID to send the notification to for failed tests."
        required: false
        type: string
      slack_notification_after_tests_name:
        description: "The name of the Slack notification."
        required: false
        type: string
        default: "Flaky Test Detection"
    secrets:
      SLACK_BOT_TOKEN:
        required: false

jobs:
  find-tests:
    name: Find test packages to run
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.split-packages.outputs.matrix }}
      workflow_id: ${{ steps.gen_id.outputs.workflow_id }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2
        with:
          fetch-depth: 0

      - name: Set up Go 1.21.9
        uses: actions/setup-go@v3
        with:
          go-version: '1.21.9'

      - name: Install flakeguard
        shell: bash
        run: go install github.com/smartcontractkit/chainlink-testing-framework/tools/flakeguard@7a091567328b88d44c91b2a058a67398ee06c4ae

      - name: Find new or updated test packages
        id: find-tests
        shell: bash
        env:
          # Needed to run go test -list
          CL_DATABASE_URL: postgresql://postgres@localhost:5432/chainlink_test?sslmode=disable
        run: |
          PATH=$PATH:$(go env GOPATH)/bin
          export PATH

          PACKAGES=$(flakeguard find --find-by-test-files-diff=${{ inputs.findByTestFilesDiff }} --find-by-affected-packages=${{ inputs.findByAffectedPackages }} --base-ref=${{ inputs.baseRef }})
          echo $PACKAGES
          echo "packages=$PACKAGES" >> $GITHUB_OUTPUT

      - name: Split test packages into groups
        id: split-packages
        shell: bash
        run: |
          PACKAGES=(${{ steps.find-tests.outputs.packages }})
          DESIRED_GROUP_COUNT=$((${{ inputs.maxGroupSize }}))
          TOTAL_PACKAGES=${#PACKAGES[@]}

          # Number of groups should be no more than the number of packages
          MAX_GROUP_COUNT=$(($TOTAL_PACKAGES < $DESIRED_GROUP_COUNT ? $TOTAL_PACKAGES : $DESIRED_GROUP_COUNT))
          BASE_GROUP_SIZE=$(($TOTAL_PACKAGES / $MAX_GROUP_COUNT))
          EXTRA=$(($TOTAL_PACKAGES % $MAX_GROUP_COUNT))

          groups=()

          current_index=0
          for (( i=0; i < $MAX_GROUP_COUNT; i++ )); do
              # Determine the number of packages for the current group
              group_size=$BASE_GROUP_SIZE
              if [[ $i -lt $EXTRA ]]; then
                  group_size=$(($group_size + 1))
              fi
              
              # Extract the packages for the current group
              if [[ $group_size -gt 0 ]]; then
                  group=("${PACKAGES[@]:current_index:group_size}")
                  groups+=("$(IFS=,; echo "${group[*]}")")
                  current_index=$(($current_index + $group_size))
              fi
          done

          # Convert groups array into a JSON array
          json_groups=$(printf '%s\n' "${groups[@]}" | jq -R . | jq -cs .)
          echo $json_groups
          # TODO: uncomment
          # echo "matrix=$json_groups" >> $GITHUB_OUTPUT
          echo "matrix=[\"github.com/smartcontractkit/chainlink/v2/core/web/resolver\",\"github.com/smartcontractkit/chainlink/v2/core/web/resolver\"]" >> $GITHUB_OUTPUT

      - name: Generate random workflow id
        id: gen_id
        shell: bash
        run: echo "workflow_id=$(uuidgen)" >> "$GITHUB_OUTPUT"          

  run-tests:
    name: Run test packages
    needs: find-tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: 
        testPackages: ${{ fromJson(needs.find-tests.outputs.matrix) }}
    env:
      DB_URL: postgresql://postgres:postgres@localhost:5432/chainlink_test?sslmode=disable
    steps:
      - name: Checkout repository
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2

      - name: Setup NodeJS
        uses: ./.github/actions/setup-nodejs
        with:
          prod: "true"
      - name: Setup Go
        uses: ./.github/actions/setup-go
      # TODO: uncomment   
      # - name: Setup Solana
      #   uses: ./.github/actions/setup-solana
      - name: Setup wasmd
        uses: ./.github/actions/setup-wasmd
      - name: Setup Postgres
        uses: ./.github/actions/setup-postgres
      - name: Touching core/web/assets/index.html
        run: mkdir -p core/web/assets && touch core/web/assets/index.html
      - name: Download Go vendor packages
        run: go mod download
      - name: Build binary
        run: go build -o chainlink.test .
      - name: Setup DB
        run: ./chainlink.test local db preparetest
        env:
          CL_DATABASE_URL: ${{ env.DB_URL }}        
      - name: Install LOOP Plugins
        run: |
          pushd $(go list -m -f "{{.Dir}}" github.com/smartcontractkit/chainlink-feeds)
          go install ./cmd/chainlink-feeds
          popd
          pushd $(go list -m -f "{{.Dir}}" github.com/smartcontractkit/chainlink-data-streams)
          go install ./mercury/cmd/chainlink-mercury
          popd
          pushd $(go list -m -f "{{.Dir}}" github.com/smartcontractkit/chainlink-solana)
          go install ./pkg/solana/cmd/chainlink-solana
          popd
          pushd $(go list -m -f "{{.Dir}}" github.com/smartcontractkit/chainlink-starknet/relayer)
          go install ./pkg/chainlink/cmd/chainlink-starknet
          popd

      # - name: Setup Go
      #   uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 # v5.0.0
      #   with:
      #     check-latest: true        
      # - name: Setup test database
      #   shell: sh
      #   run: make setup-testdb
      # - name: Source database environment variables
      #   run: source .dbenv

      - name: Clean test cache
        run: go clean -testcache

      # - name: Set up Go 1.21.9
      #   uses: actions/setup-go@v3
      #   with:
      #     go-version: '1.21.9'        

      - name: Generate random id
        id: gen_id
        run: echo "id=$(uuidgen)" >> "$GITHUB_OUTPUT"

      - name: Install flakeguard
        shell: bash
        run: go install github.com/smartcontractkit/chainlink-testing-framework/tools/flakeguard@7a091567328b88d44c91b2a058a67398ee06c4ae

      - name: Run tests with flakeguard
        shell: bash
        run: flakeguard run --test-packages=${{ matrix.testPackages }} --run-count=${{ inputs.runCount }} --threshold=${{ inputs.runThreshold }} --race=${{ inputs.runWithRace }} --output-json=test_result.json
        env:
          CL_DATABASE_URL: ${{ env.DB_URL }}

      - name: Upload test result as artifact
        if: failure()
        uses: actions/upload-artifact@v4.4.3
        with:
          name: test_result_${{ needs.find-tests.outputs.workflow_id }}_${{ steps.gen_id.outputs.id }}
          path: test_result.json
          retention-days: 1          

  after_tests:
    needs: [find-tests, run-tests]
    if: always()
    name: After tests
    runs-on: ubuntu-latest
    outputs:
      test_results: ${{ steps.set_test_results.outputs.results }}
    steps:
      - name: Download all test result artifacts
        uses: actions/download-artifact@v4.1.8
        with:
          path: test_results
          pattern:
            test_result_${{ needs.find-tests.outputs.workflow_id }}_*

      - name: Set combined test results
        id: set_test_results
        run: |
          if [ -d "test_results" ]; then
            cd test_results
            ls -R .
            # Combine JSON files into one file and sort in ascending order by PassRatio
            find . -name '*.json' -exec cat {} + | jq -s 'add | sort_by(.PassRatio)' > all_test_results.json
            # Display the combined JSON
            jq . all_test_results.json
            # Set the combined results as an output
            echo "all_tests=$(jq -c . all_test_results.json)" >> "$GITHUB_OUTPUT"
            # Set the failed tests as a separate output
            echo "failed_tests=$(jq -c 'map(select(.PassRatio < ($runThreshold | tonumber)))' all_test_results.json --arg runThreshold '${{ inputs.runThreshold }}')" >> "$GITHUB_OUTPUT"
          else
            echo "No test results directory found."
            echo "all_tests=[]" >> "$GITHUB_OUTPUT"
            echo "failed_tests=[]" >> "$GITHUB_OUTPUT"
            echo "failed_tests_escaped=[]" >> "$GITHUB_OUTPUT"
          fi

      - name: Escape failed tests JSON
        id: escape_failed_tests
        run: |
          json=$(echo '${{ steps.set_test_results.outputs.failed_tests }}' | jq @json)
          echo "failed_tests_escaped=$json" >> "$GITHUB_OUTPUT"

      - name: Send Slack message if tests failed
        uses: slackapi/slack-github-action@6c661ce58804a1a20f6dc5fbee7f0381b469e001 # v1.25.0
        if: ${{ inputs.slack_notification_after_tests_channel_id != '' && contains(join(needs.*.result, ','), 'failure')}}
        id: slack
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          channel-id: ${{ inputs.slack_notification_after_tests_channel_id }}
          payload: |
            {
              "attachments": [
                {
                  "color": "${{ contains(join(needs.*.result, ','), 'failure') && '#C62828' || contains(join(needs.*.result, ','), 'cancelled') && '#FFA000' || '2E7D32' }}",
                  "blocks": [
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "${{ inputs.slack_notification_after_tests_name }} - ${{ contains(join(needs.*.result, ','), 'failure') && 'Found flaky tests :x:' || contains(join(needs.*.result, ','), 'cancelled') && 'Cancelled :warning:' || 'Passed :white_check_mark:' }}"
                      }
                    },
                    {
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>"
                      }
                    }
                  ]
                }
              ]
            }

      - name: Send Slack message with failed tests
        if: ${{ inputs.slack_notification_after_tests_channel_id != '' && contains(join(needs.*.result, ','), 'failure')}}
        uses: slackapi/slack-github-action@6c661ce58804a1a20f6dc5fbee7f0381b469e001 # v1.25.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        with:
          channel-id: ${{ inputs.slack_notification_after_tests_channel_id }}
          payload: |
            {
              "thread_ts": "${{ steps.slack.outputs.thread_ts }}",
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "Failed Tests"
                  }
                },                
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": ${{ steps.escape_failed_tests.outputs.failed_tests_escaped }}
                  }
                }
              ]
            }