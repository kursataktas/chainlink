// Code generated by mockery v2.45.0. DO NOT EDIT.

package mock_contracts

import (
	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	common "github.com/ethereum/go-ethereum/common"

	event "github.com/ethereum/go-ethereum/event"

	forwarder "github.com/smartcontractkit/chainlink/v2/core/gethwrappers/keystone/generated/forwarder"

	generated "github.com/smartcontractkit/chainlink/v2/core/gethwrappers/generated"

	mock "github.com/stretchr/testify/mock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// KeystoneForwarderInterface is an autogenerated mock type for the KeystoneForwarderInterface type
type KeystoneForwarderInterface struct {
	mock.Mock
}

type KeystoneForwarderInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *KeystoneForwarderInterface) EXPECT() *KeystoneForwarderInterface_Expecter {
	return &KeystoneForwarderInterface_Expecter{mock: &_m.Mock}
}

// AcceptOwnership provides a mock function with given fields: opts
func (_m *KeystoneForwarderInterface) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for AcceptOwnership")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts) (*types.Transaction, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts) *types.Transaction); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeystoneForwarderInterface_AcceptOwnership_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AcceptOwnership'
type KeystoneForwarderInterface_AcceptOwnership_Call struct {
	*mock.Call
}

// AcceptOwnership is a helper method to define mock.On call
//   - opts *bind.TransactOpts
func (_e *KeystoneForwarderInterface_Expecter) AcceptOwnership(opts interface{}) *KeystoneForwarderInterface_AcceptOwnership_Call {
	return &KeystoneForwarderInterface_AcceptOwnership_Call{Call: _e.mock.On("AcceptOwnership", opts)}
}

func (_c *KeystoneForwarderInterface_AcceptOwnership_Call) Run(run func(opts *bind.TransactOpts)) *KeystoneForwarderInterface_AcceptOwnership_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts))
	})
	return _c
}

func (_c *KeystoneForwarderInterface_AcceptOwnership_Call) Return(_a0 *types.Transaction, _a1 error) *KeystoneForwarderInterface_AcceptOwnership_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KeystoneForwarderInterface_AcceptOwnership_Call) RunAndReturn(run func(*bind.TransactOpts) (*types.Transaction, error)) *KeystoneForwarderInterface_AcceptOwnership_Call {
	_c.Call.Return(run)
	return _c
}

// AddForwarder provides a mock function with given fields: opts, _a1
func (_m *KeystoneForwarderInterface) AddForwarder(opts *bind.TransactOpts, _a1 common.Address) (*types.Transaction, error) {
	ret := _m.Called(opts, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddForwarder")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address) (*types.Transaction, error)); ok {
		return rf(opts, _a1)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address) *types.Transaction); ok {
		r0 = rf(opts, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address) error); ok {
		r1 = rf(opts, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeystoneForwarderInterface_AddForwarder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddForwarder'
type KeystoneForwarderInterface_AddForwarder_Call struct {
	*mock.Call
}

// AddForwarder is a helper method to define mock.On call
//   - opts *bind.TransactOpts
//   - _a1 common.Address
func (_e *KeystoneForwarderInterface_Expecter) AddForwarder(opts interface{}, _a1 interface{}) *KeystoneForwarderInterface_AddForwarder_Call {
	return &KeystoneForwarderInterface_AddForwarder_Call{Call: _e.mock.On("AddForwarder", opts, _a1)}
}

func (_c *KeystoneForwarderInterface_AddForwarder_Call) Run(run func(opts *bind.TransactOpts, _a1 common.Address)) *KeystoneForwarderInterface_AddForwarder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts), args[1].(common.Address))
	})
	return _c
}

func (_c *KeystoneForwarderInterface_AddForwarder_Call) Return(_a0 *types.Transaction, _a1 error) *KeystoneForwarderInterface_AddForwarder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KeystoneForwarderInterface_AddForwarder_Call) RunAndReturn(run func(*bind.TransactOpts, common.Address) (*types.Transaction, error)) *KeystoneForwarderInterface_AddForwarder_Call {
	_c.Call.Return(run)
	return _c
}

// Address provides a mock function with given fields:
func (_m *KeystoneForwarderInterface) Address() common.Address {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Address")
	}

	var r0 common.Address
	if rf, ok := ret.Get(0).(func() common.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	return r0
}

// KeystoneForwarderInterface_Address_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Address'
type KeystoneForwarderInterface_Address_Call struct {
	*mock.Call
}

// Address is a helper method to define mock.On call
func (_e *KeystoneForwarderInterface_Expecter) Address() *KeystoneForwarderInterface_Address_Call {
	return &KeystoneForwarderInterface_Address_Call{Call: _e.mock.On("Address")}
}

func (_c *KeystoneForwarderInterface_Address_Call) Run(run func()) *KeystoneForwarderInterface_Address_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KeystoneForwarderInterface_Address_Call) Return(_a0 common.Address) *KeystoneForwarderInterface_Address_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KeystoneForwarderInterface_Address_Call) RunAndReturn(run func() common.Address) *KeystoneForwarderInterface_Address_Call {
	_c.Call.Return(run)
	return _c
}

// ClearConfig provides a mock function with given fields: opts, donId, configVersion
func (_m *KeystoneForwarderInterface) ClearConfig(opts *bind.TransactOpts, donId uint32, configVersion uint32) (*types.Transaction, error) {
	ret := _m.Called(opts, donId, configVersion)

	if len(ret) == 0 {
		panic("no return value specified for ClearConfig")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, uint32, uint32) (*types.Transaction, error)); ok {
		return rf(opts, donId, configVersion)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, uint32, uint32) *types.Transaction); ok {
		r0 = rf(opts, donId, configVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, uint32, uint32) error); ok {
		r1 = rf(opts, donId, configVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeystoneForwarderInterface_ClearConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearConfig'
type KeystoneForwarderInterface_ClearConfig_Call struct {
	*mock.Call
}

// ClearConfig is a helper method to define mock.On call
//   - opts *bind.TransactOpts
//   - donId uint32
//   - configVersion uint32
func (_e *KeystoneForwarderInterface_Expecter) ClearConfig(opts interface{}, donId interface{}, configVersion interface{}) *KeystoneForwarderInterface_ClearConfig_Call {
	return &KeystoneForwarderInterface_ClearConfig_Call{Call: _e.mock.On("ClearConfig", opts, donId, configVersion)}
}

func (_c *KeystoneForwarderInterface_ClearConfig_Call) Run(run func(opts *bind.TransactOpts, donId uint32, configVersion uint32)) *KeystoneForwarderInterface_ClearConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts), args[1].(uint32), args[2].(uint32))
	})
	return _c
}

func (_c *KeystoneForwarderInterface_ClearConfig_Call) Return(_a0 *types.Transaction, _a1 error) *KeystoneForwarderInterface_ClearConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KeystoneForwarderInterface_ClearConfig_Call) RunAndReturn(run func(*bind.TransactOpts, uint32, uint32) (*types.Transaction, error)) *KeystoneForwarderInterface_ClearConfig_Call {
	_c.Call.Return(run)
	return _c
}

// FilterConfigSet provides a mock function with given fields: opts, donId, configVersion
func (_m *KeystoneForwarderInterface) FilterConfigSet(opts *bind.FilterOpts, donId []uint32, configVersion []uint32) (*forwarder.KeystoneForwarderConfigSetIterator, error) {
	ret := _m.Called(opts, donId, configVersion)

	if len(ret) == 0 {
		panic("no return value specified for FilterConfigSet")
	}

	var r0 *forwarder.KeystoneForwarderConfigSetIterator
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []uint32, []uint32) (*forwarder.KeystoneForwarderConfigSetIterator, error)); ok {
		return rf(opts, donId, configVersion)
	}
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []uint32, []uint32) *forwarder.KeystoneForwarderConfigSetIterator); ok {
		r0 = rf(opts, donId, configVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*forwarder.KeystoneForwarderConfigSetIterator)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []uint32, []uint32) error); ok {
		r1 = rf(opts, donId, configVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeystoneForwarderInterface_FilterConfigSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FilterConfigSet'
type KeystoneForwarderInterface_FilterConfigSet_Call struct {
	*mock.Call
}

// FilterConfigSet is a helper method to define mock.On call
//   - opts *bind.FilterOpts
//   - donId []uint32
//   - configVersion []uint32
func (_e *KeystoneForwarderInterface_Expecter) FilterConfigSet(opts interface{}, donId interface{}, configVersion interface{}) *KeystoneForwarderInterface_FilterConfigSet_Call {
	return &KeystoneForwarderInterface_FilterConfigSet_Call{Call: _e.mock.On("FilterConfigSet", opts, donId, configVersion)}
}

func (_c *KeystoneForwarderInterface_FilterConfigSet_Call) Run(run func(opts *bind.FilterOpts, donId []uint32, configVersion []uint32)) *KeystoneForwarderInterface_FilterConfigSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.FilterOpts), args[1].([]uint32), args[2].([]uint32))
	})
	return _c
}

func (_c *KeystoneForwarderInterface_FilterConfigSet_Call) Return(_a0 *forwarder.KeystoneForwarderConfigSetIterator, _a1 error) *KeystoneForwarderInterface_FilterConfigSet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KeystoneForwarderInterface_FilterConfigSet_Call) RunAndReturn(run func(*bind.FilterOpts, []uint32, []uint32) (*forwarder.KeystoneForwarderConfigSetIterator, error)) *KeystoneForwarderInterface_FilterConfigSet_Call {
	_c.Call.Return(run)
	return _c
}

// FilterForwarderAdded provides a mock function with given fields: opts, _a1
func (_m *KeystoneForwarderInterface) FilterForwarderAdded(opts *bind.FilterOpts, _a1 []common.Address) (*forwarder.KeystoneForwarderForwarderAddedIterator, error) {
	ret := _m.Called(opts, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FilterForwarderAdded")
	}

	var r0 *forwarder.KeystoneForwarderForwarderAddedIterator
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address) (*forwarder.KeystoneForwarderForwarderAddedIterator, error)); ok {
		return rf(opts, _a1)
	}
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address) *forwarder.KeystoneForwarderForwarderAddedIterator); ok {
		r0 = rf(opts, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*forwarder.KeystoneForwarderForwarderAddedIterator)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []common.Address) error); ok {
		r1 = rf(opts, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeystoneForwarderInterface_FilterForwarderAdded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FilterForwarderAdded'
type KeystoneForwarderInterface_FilterForwarderAdded_Call struct {
	*mock.Call
}

// FilterForwarderAdded is a helper method to define mock.On call
//   - opts *bind.FilterOpts
//   - _a1 []common.Address
func (_e *KeystoneForwarderInterface_Expecter) FilterForwarderAdded(opts interface{}, _a1 interface{}) *KeystoneForwarderInterface_FilterForwarderAdded_Call {
	return &KeystoneForwarderInterface_FilterForwarderAdded_Call{Call: _e.mock.On("FilterForwarderAdded", opts, _a1)}
}

func (_c *KeystoneForwarderInterface_FilterForwarderAdded_Call) Run(run func(opts *bind.FilterOpts, _a1 []common.Address)) *KeystoneForwarderInterface_FilterForwarderAdded_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.FilterOpts), args[1].([]common.Address))
	})
	return _c
}

func (_c *KeystoneForwarderInterface_FilterForwarderAdded_Call) Return(_a0 *forwarder.KeystoneForwarderForwarderAddedIterator, _a1 error) *KeystoneForwarderInterface_FilterForwarderAdded_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KeystoneForwarderInterface_FilterForwarderAdded_Call) RunAndReturn(run func(*bind.FilterOpts, []common.Address) (*forwarder.KeystoneForwarderForwarderAddedIterator, error)) *KeystoneForwarderInterface_FilterForwarderAdded_Call {
	_c.Call.Return(run)
	return _c
}

// FilterForwarderRemoved provides a mock function with given fields: opts, _a1
func (_m *KeystoneForwarderInterface) FilterForwarderRemoved(opts *bind.FilterOpts, _a1 []common.Address) (*forwarder.KeystoneForwarderForwarderRemovedIterator, error) {
	ret := _m.Called(opts, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FilterForwarderRemoved")
	}

	var r0 *forwarder.KeystoneForwarderForwarderRemovedIterator
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address) (*forwarder.KeystoneForwarderForwarderRemovedIterator, error)); ok {
		return rf(opts, _a1)
	}
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address) *forwarder.KeystoneForwarderForwarderRemovedIterator); ok {
		r0 = rf(opts, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*forwarder.KeystoneForwarderForwarderRemovedIterator)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []common.Address) error); ok {
		r1 = rf(opts, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeystoneForwarderInterface_FilterForwarderRemoved_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FilterForwarderRemoved'
type KeystoneForwarderInterface_FilterForwarderRemoved_Call struct {
	*mock.Call
}

// FilterForwarderRemoved is a helper method to define mock.On call
//   - opts *bind.FilterOpts
//   - _a1 []common.Address
func (_e *KeystoneForwarderInterface_Expecter) FilterForwarderRemoved(opts interface{}, _a1 interface{}) *KeystoneForwarderInterface_FilterForwarderRemoved_Call {
	return &KeystoneForwarderInterface_FilterForwarderRemoved_Call{Call: _e.mock.On("FilterForwarderRemoved", opts, _a1)}
}

func (_c *KeystoneForwarderInterface_FilterForwarderRemoved_Call) Run(run func(opts *bind.FilterOpts, _a1 []common.Address)) *KeystoneForwarderInterface_FilterForwarderRemoved_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.FilterOpts), args[1].([]common.Address))
	})
	return _c
}

func (_c *KeystoneForwarderInterface_FilterForwarderRemoved_Call) Return(_a0 *forwarder.KeystoneForwarderForwarderRemovedIterator, _a1 error) *KeystoneForwarderInterface_FilterForwarderRemoved_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KeystoneForwarderInterface_FilterForwarderRemoved_Call) RunAndReturn(run func(*bind.FilterOpts, []common.Address) (*forwarder.KeystoneForwarderForwarderRemovedIterator, error)) *KeystoneForwarderInterface_FilterForwarderRemoved_Call {
	_c.Call.Return(run)
	return _c
}

// FilterOwnershipTransferRequested provides a mock function with given fields: opts, from, to
func (_m *KeystoneForwarderInterface) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*forwarder.KeystoneForwarderOwnershipTransferRequestedIterator, error) {
	ret := _m.Called(opts, from, to)

	if len(ret) == 0 {
		panic("no return value specified for FilterOwnershipTransferRequested")
	}

	var r0 *forwarder.KeystoneForwarderOwnershipTransferRequestedIterator
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address, []common.Address) (*forwarder.KeystoneForwarderOwnershipTransferRequestedIterator, error)); ok {
		return rf(opts, from, to)
	}
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address, []common.Address) *forwarder.KeystoneForwarderOwnershipTransferRequestedIterator); ok {
		r0 = rf(opts, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*forwarder.KeystoneForwarderOwnershipTransferRequestedIterator)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []common.Address, []common.Address) error); ok {
		r1 = rf(opts, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeystoneForwarderInterface_FilterOwnershipTransferRequested_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FilterOwnershipTransferRequested'
type KeystoneForwarderInterface_FilterOwnershipTransferRequested_Call struct {
	*mock.Call
}

// FilterOwnershipTransferRequested is a helper method to define mock.On call
//   - opts *bind.FilterOpts
//   - from []common.Address
//   - to []common.Address
func (_e *KeystoneForwarderInterface_Expecter) FilterOwnershipTransferRequested(opts interface{}, from interface{}, to interface{}) *KeystoneForwarderInterface_FilterOwnershipTransferRequested_Call {
	return &KeystoneForwarderInterface_FilterOwnershipTransferRequested_Call{Call: _e.mock.On("FilterOwnershipTransferRequested", opts, from, to)}
}

func (_c *KeystoneForwarderInterface_FilterOwnershipTransferRequested_Call) Run(run func(opts *bind.FilterOpts, from []common.Address, to []common.Address)) *KeystoneForwarderInterface_FilterOwnershipTransferRequested_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.FilterOpts), args[1].([]common.Address), args[2].([]common.Address))
	})
	return _c
}

func (_c *KeystoneForwarderInterface_FilterOwnershipTransferRequested_Call) Return(_a0 *forwarder.KeystoneForwarderOwnershipTransferRequestedIterator, _a1 error) *KeystoneForwarderInterface_FilterOwnershipTransferRequested_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KeystoneForwarderInterface_FilterOwnershipTransferRequested_Call) RunAndReturn(run func(*bind.FilterOpts, []common.Address, []common.Address) (*forwarder.KeystoneForwarderOwnershipTransferRequestedIterator, error)) *KeystoneForwarderInterface_FilterOwnershipTransferRequested_Call {
	_c.Call.Return(run)
	return _c
}

// FilterOwnershipTransferred provides a mock function with given fields: opts, from, to
func (_m *KeystoneForwarderInterface) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*forwarder.KeystoneForwarderOwnershipTransferredIterator, error) {
	ret := _m.Called(opts, from, to)

	if len(ret) == 0 {
		panic("no return value specified for FilterOwnershipTransferred")
	}

	var r0 *forwarder.KeystoneForwarderOwnershipTransferredIterator
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address, []common.Address) (*forwarder.KeystoneForwarderOwnershipTransferredIterator, error)); ok {
		return rf(opts, from, to)
	}
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address, []common.Address) *forwarder.KeystoneForwarderOwnershipTransferredIterator); ok {
		r0 = rf(opts, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*forwarder.KeystoneForwarderOwnershipTransferredIterator)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []common.Address, []common.Address) error); ok {
		r1 = rf(opts, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeystoneForwarderInterface_FilterOwnershipTransferred_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FilterOwnershipTransferred'
type KeystoneForwarderInterface_FilterOwnershipTransferred_Call struct {
	*mock.Call
}

// FilterOwnershipTransferred is a helper method to define mock.On call
//   - opts *bind.FilterOpts
//   - from []common.Address
//   - to []common.Address
func (_e *KeystoneForwarderInterface_Expecter) FilterOwnershipTransferred(opts interface{}, from interface{}, to interface{}) *KeystoneForwarderInterface_FilterOwnershipTransferred_Call {
	return &KeystoneForwarderInterface_FilterOwnershipTransferred_Call{Call: _e.mock.On("FilterOwnershipTransferred", opts, from, to)}
}

func (_c *KeystoneForwarderInterface_FilterOwnershipTransferred_Call) Run(run func(opts *bind.FilterOpts, from []common.Address, to []common.Address)) *KeystoneForwarderInterface_FilterOwnershipTransferred_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.FilterOpts), args[1].([]common.Address), args[2].([]common.Address))
	})
	return _c
}

func (_c *KeystoneForwarderInterface_FilterOwnershipTransferred_Call) Return(_a0 *forwarder.KeystoneForwarderOwnershipTransferredIterator, _a1 error) *KeystoneForwarderInterface_FilterOwnershipTransferred_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KeystoneForwarderInterface_FilterOwnershipTransferred_Call) RunAndReturn(run func(*bind.FilterOpts, []common.Address, []common.Address) (*forwarder.KeystoneForwarderOwnershipTransferredIterator, error)) *KeystoneForwarderInterface_FilterOwnershipTransferred_Call {
	_c.Call.Return(run)
	return _c
}

// FilterReportProcessed provides a mock function with given fields: opts, receiver, workflowExecutionId, reportId
func (_m *KeystoneForwarderInterface) FilterReportProcessed(opts *bind.FilterOpts, receiver []common.Address, workflowExecutionId [][32]byte, reportId [][2]byte) (*forwarder.KeystoneForwarderReportProcessedIterator, error) {
	ret := _m.Called(opts, receiver, workflowExecutionId, reportId)

	if len(ret) == 0 {
		panic("no return value specified for FilterReportProcessed")
	}

	var r0 *forwarder.KeystoneForwarderReportProcessedIterator
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address, [][32]byte, [][2]byte) (*forwarder.KeystoneForwarderReportProcessedIterator, error)); ok {
		return rf(opts, receiver, workflowExecutionId, reportId)
	}
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address, [][32]byte, [][2]byte) *forwarder.KeystoneForwarderReportProcessedIterator); ok {
		r0 = rf(opts, receiver, workflowExecutionId, reportId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*forwarder.KeystoneForwarderReportProcessedIterator)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []common.Address, [][32]byte, [][2]byte) error); ok {
		r1 = rf(opts, receiver, workflowExecutionId, reportId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeystoneForwarderInterface_FilterReportProcessed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FilterReportProcessed'
type KeystoneForwarderInterface_FilterReportProcessed_Call struct {
	*mock.Call
}

// FilterReportProcessed is a helper method to define mock.On call
//   - opts *bind.FilterOpts
//   - receiver []common.Address
//   - workflowExecutionId [][32]byte
//   - reportId [][2]byte
func (_e *KeystoneForwarderInterface_Expecter) FilterReportProcessed(opts interface{}, receiver interface{}, workflowExecutionId interface{}, reportId interface{}) *KeystoneForwarderInterface_FilterReportProcessed_Call {
	return &KeystoneForwarderInterface_FilterReportProcessed_Call{Call: _e.mock.On("FilterReportProcessed", opts, receiver, workflowExecutionId, reportId)}
}

func (_c *KeystoneForwarderInterface_FilterReportProcessed_Call) Run(run func(opts *bind.FilterOpts, receiver []common.Address, workflowExecutionId [][32]byte, reportId [][2]byte)) *KeystoneForwarderInterface_FilterReportProcessed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.FilterOpts), args[1].([]common.Address), args[2].([][32]byte), args[3].([][2]byte))
	})
	return _c
}

func (_c *KeystoneForwarderInterface_FilterReportProcessed_Call) Return(_a0 *forwarder.KeystoneForwarderReportProcessedIterator, _a1 error) *KeystoneForwarderInterface_FilterReportProcessed_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KeystoneForwarderInterface_FilterReportProcessed_Call) RunAndReturn(run func(*bind.FilterOpts, []common.Address, [][32]byte, [][2]byte) (*forwarder.KeystoneForwarderReportProcessedIterator, error)) *KeystoneForwarderInterface_FilterReportProcessed_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransmissionId provides a mock function with given fields: opts, receiver, workflowExecutionId, reportId
func (_m *KeystoneForwarderInterface) GetTransmissionId(opts *bind.CallOpts, receiver common.Address, workflowExecutionId [32]byte, reportId [2]byte) ([32]byte, error) {
	ret := _m.Called(opts, receiver, workflowExecutionId, reportId)

	if len(ret) == 0 {
		panic("no return value specified for GetTransmissionId")
	}

	var r0 [32]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address, [32]byte, [2]byte) ([32]byte, error)); ok {
		return rf(opts, receiver, workflowExecutionId, reportId)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address, [32]byte, [2]byte) [32]byte); ok {
		r0 = rf(opts, receiver, workflowExecutionId, reportId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([32]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, common.Address, [32]byte, [2]byte) error); ok {
		r1 = rf(opts, receiver, workflowExecutionId, reportId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeystoneForwarderInterface_GetTransmissionId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransmissionId'
type KeystoneForwarderInterface_GetTransmissionId_Call struct {
	*mock.Call
}

// GetTransmissionId is a helper method to define mock.On call
//   - opts *bind.CallOpts
//   - receiver common.Address
//   - workflowExecutionId [32]byte
//   - reportId [2]byte
func (_e *KeystoneForwarderInterface_Expecter) GetTransmissionId(opts interface{}, receiver interface{}, workflowExecutionId interface{}, reportId interface{}) *KeystoneForwarderInterface_GetTransmissionId_Call {
	return &KeystoneForwarderInterface_GetTransmissionId_Call{Call: _e.mock.On("GetTransmissionId", opts, receiver, workflowExecutionId, reportId)}
}

func (_c *KeystoneForwarderInterface_GetTransmissionId_Call) Run(run func(opts *bind.CallOpts, receiver common.Address, workflowExecutionId [32]byte, reportId [2]byte)) *KeystoneForwarderInterface_GetTransmissionId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts), args[1].(common.Address), args[2].([32]byte), args[3].([2]byte))
	})
	return _c
}

func (_c *KeystoneForwarderInterface_GetTransmissionId_Call) Return(_a0 [32]byte, _a1 error) *KeystoneForwarderInterface_GetTransmissionId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KeystoneForwarderInterface_GetTransmissionId_Call) RunAndReturn(run func(*bind.CallOpts, common.Address, [32]byte, [2]byte) ([32]byte, error)) *KeystoneForwarderInterface_GetTransmissionId_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransmissionInfo provides a mock function with given fields: opts, receiver, workflowExecutionId, reportId
func (_m *KeystoneForwarderInterface) GetTransmissionInfo(opts *bind.CallOpts, receiver common.Address, workflowExecutionId [32]byte, reportId [2]byte) (forwarder.IRouterTransmissionInfo, error) {
	ret := _m.Called(opts, receiver, workflowExecutionId, reportId)

	if len(ret) == 0 {
		panic("no return value specified for GetTransmissionInfo")
	}

	var r0 forwarder.IRouterTransmissionInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address, [32]byte, [2]byte) (forwarder.IRouterTransmissionInfo, error)); ok {
		return rf(opts, receiver, workflowExecutionId, reportId)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address, [32]byte, [2]byte) forwarder.IRouterTransmissionInfo); ok {
		r0 = rf(opts, receiver, workflowExecutionId, reportId)
	} else {
		r0 = ret.Get(0).(forwarder.IRouterTransmissionInfo)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, common.Address, [32]byte, [2]byte) error); ok {
		r1 = rf(opts, receiver, workflowExecutionId, reportId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeystoneForwarderInterface_GetTransmissionInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransmissionInfo'
type KeystoneForwarderInterface_GetTransmissionInfo_Call struct {
	*mock.Call
}

// GetTransmissionInfo is a helper method to define mock.On call
//   - opts *bind.CallOpts
//   - receiver common.Address
//   - workflowExecutionId [32]byte
//   - reportId [2]byte
func (_e *KeystoneForwarderInterface_Expecter) GetTransmissionInfo(opts interface{}, receiver interface{}, workflowExecutionId interface{}, reportId interface{}) *KeystoneForwarderInterface_GetTransmissionInfo_Call {
	return &KeystoneForwarderInterface_GetTransmissionInfo_Call{Call: _e.mock.On("GetTransmissionInfo", opts, receiver, workflowExecutionId, reportId)}
}

func (_c *KeystoneForwarderInterface_GetTransmissionInfo_Call) Run(run func(opts *bind.CallOpts, receiver common.Address, workflowExecutionId [32]byte, reportId [2]byte)) *KeystoneForwarderInterface_GetTransmissionInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts), args[1].(common.Address), args[2].([32]byte), args[3].([2]byte))
	})
	return _c
}

func (_c *KeystoneForwarderInterface_GetTransmissionInfo_Call) Return(_a0 forwarder.IRouterTransmissionInfo, _a1 error) *KeystoneForwarderInterface_GetTransmissionInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KeystoneForwarderInterface_GetTransmissionInfo_Call) RunAndReturn(run func(*bind.CallOpts, common.Address, [32]byte, [2]byte) (forwarder.IRouterTransmissionInfo, error)) *KeystoneForwarderInterface_GetTransmissionInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransmitter provides a mock function with given fields: opts, receiver, workflowExecutionId, reportId
func (_m *KeystoneForwarderInterface) GetTransmitter(opts *bind.CallOpts, receiver common.Address, workflowExecutionId [32]byte, reportId [2]byte) (common.Address, error) {
	ret := _m.Called(opts, receiver, workflowExecutionId, reportId)

	if len(ret) == 0 {
		panic("no return value specified for GetTransmitter")
	}

	var r0 common.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address, [32]byte, [2]byte) (common.Address, error)); ok {
		return rf(opts, receiver, workflowExecutionId, reportId)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address, [32]byte, [2]byte) common.Address); ok {
		r0 = rf(opts, receiver, workflowExecutionId, reportId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, common.Address, [32]byte, [2]byte) error); ok {
		r1 = rf(opts, receiver, workflowExecutionId, reportId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeystoneForwarderInterface_GetTransmitter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransmitter'
type KeystoneForwarderInterface_GetTransmitter_Call struct {
	*mock.Call
}

// GetTransmitter is a helper method to define mock.On call
//   - opts *bind.CallOpts
//   - receiver common.Address
//   - workflowExecutionId [32]byte
//   - reportId [2]byte
func (_e *KeystoneForwarderInterface_Expecter) GetTransmitter(opts interface{}, receiver interface{}, workflowExecutionId interface{}, reportId interface{}) *KeystoneForwarderInterface_GetTransmitter_Call {
	return &KeystoneForwarderInterface_GetTransmitter_Call{Call: _e.mock.On("GetTransmitter", opts, receiver, workflowExecutionId, reportId)}
}

func (_c *KeystoneForwarderInterface_GetTransmitter_Call) Run(run func(opts *bind.CallOpts, receiver common.Address, workflowExecutionId [32]byte, reportId [2]byte)) *KeystoneForwarderInterface_GetTransmitter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts), args[1].(common.Address), args[2].([32]byte), args[3].([2]byte))
	})
	return _c
}

func (_c *KeystoneForwarderInterface_GetTransmitter_Call) Return(_a0 common.Address, _a1 error) *KeystoneForwarderInterface_GetTransmitter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KeystoneForwarderInterface_GetTransmitter_Call) RunAndReturn(run func(*bind.CallOpts, common.Address, [32]byte, [2]byte) (common.Address, error)) *KeystoneForwarderInterface_GetTransmitter_Call {
	_c.Call.Return(run)
	return _c
}

// IsForwarder provides a mock function with given fields: opts, _a1
func (_m *KeystoneForwarderInterface) IsForwarder(opts *bind.CallOpts, _a1 common.Address) (bool, error) {
	ret := _m.Called(opts, _a1)

	if len(ret) == 0 {
		panic("no return value specified for IsForwarder")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) (bool, error)); ok {
		return rf(opts, _a1)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, common.Address) bool); ok {
		r0 = rf(opts, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts, common.Address) error); ok {
		r1 = rf(opts, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeystoneForwarderInterface_IsForwarder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsForwarder'
type KeystoneForwarderInterface_IsForwarder_Call struct {
	*mock.Call
}

// IsForwarder is a helper method to define mock.On call
//   - opts *bind.CallOpts
//   - _a1 common.Address
func (_e *KeystoneForwarderInterface_Expecter) IsForwarder(opts interface{}, _a1 interface{}) *KeystoneForwarderInterface_IsForwarder_Call {
	return &KeystoneForwarderInterface_IsForwarder_Call{Call: _e.mock.On("IsForwarder", opts, _a1)}
}

func (_c *KeystoneForwarderInterface_IsForwarder_Call) Run(run func(opts *bind.CallOpts, _a1 common.Address)) *KeystoneForwarderInterface_IsForwarder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts), args[1].(common.Address))
	})
	return _c
}

func (_c *KeystoneForwarderInterface_IsForwarder_Call) Return(_a0 bool, _a1 error) *KeystoneForwarderInterface_IsForwarder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KeystoneForwarderInterface_IsForwarder_Call) RunAndReturn(run func(*bind.CallOpts, common.Address) (bool, error)) *KeystoneForwarderInterface_IsForwarder_Call {
	_c.Call.Return(run)
	return _c
}

// Owner provides a mock function with given fields: opts
func (_m *KeystoneForwarderInterface) Owner(opts *bind.CallOpts) (common.Address, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for Owner")
	}

	var r0 common.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) (common.Address, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) common.Address); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeystoneForwarderInterface_Owner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Owner'
type KeystoneForwarderInterface_Owner_Call struct {
	*mock.Call
}

// Owner is a helper method to define mock.On call
//   - opts *bind.CallOpts
func (_e *KeystoneForwarderInterface_Expecter) Owner(opts interface{}) *KeystoneForwarderInterface_Owner_Call {
	return &KeystoneForwarderInterface_Owner_Call{Call: _e.mock.On("Owner", opts)}
}

func (_c *KeystoneForwarderInterface_Owner_Call) Run(run func(opts *bind.CallOpts)) *KeystoneForwarderInterface_Owner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts))
	})
	return _c
}

func (_c *KeystoneForwarderInterface_Owner_Call) Return(_a0 common.Address, _a1 error) *KeystoneForwarderInterface_Owner_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KeystoneForwarderInterface_Owner_Call) RunAndReturn(run func(*bind.CallOpts) (common.Address, error)) *KeystoneForwarderInterface_Owner_Call {
	_c.Call.Return(run)
	return _c
}

// ParseConfigSet provides a mock function with given fields: log
func (_m *KeystoneForwarderInterface) ParseConfigSet(log types.Log) (*forwarder.KeystoneForwarderConfigSet, error) {
	ret := _m.Called(log)

	if len(ret) == 0 {
		panic("no return value specified for ParseConfigSet")
	}

	var r0 *forwarder.KeystoneForwarderConfigSet
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (*forwarder.KeystoneForwarderConfigSet, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) *forwarder.KeystoneForwarderConfigSet); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*forwarder.KeystoneForwarderConfigSet)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeystoneForwarderInterface_ParseConfigSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseConfigSet'
type KeystoneForwarderInterface_ParseConfigSet_Call struct {
	*mock.Call
}

// ParseConfigSet is a helper method to define mock.On call
//   - log types.Log
func (_e *KeystoneForwarderInterface_Expecter) ParseConfigSet(log interface{}) *KeystoneForwarderInterface_ParseConfigSet_Call {
	return &KeystoneForwarderInterface_ParseConfigSet_Call{Call: _e.mock.On("ParseConfigSet", log)}
}

func (_c *KeystoneForwarderInterface_ParseConfigSet_Call) Run(run func(log types.Log)) *KeystoneForwarderInterface_ParseConfigSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Log))
	})
	return _c
}

func (_c *KeystoneForwarderInterface_ParseConfigSet_Call) Return(_a0 *forwarder.KeystoneForwarderConfigSet, _a1 error) *KeystoneForwarderInterface_ParseConfigSet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KeystoneForwarderInterface_ParseConfigSet_Call) RunAndReturn(run func(types.Log) (*forwarder.KeystoneForwarderConfigSet, error)) *KeystoneForwarderInterface_ParseConfigSet_Call {
	_c.Call.Return(run)
	return _c
}

// ParseForwarderAdded provides a mock function with given fields: log
func (_m *KeystoneForwarderInterface) ParseForwarderAdded(log types.Log) (*forwarder.KeystoneForwarderForwarderAdded, error) {
	ret := _m.Called(log)

	if len(ret) == 0 {
		panic("no return value specified for ParseForwarderAdded")
	}

	var r0 *forwarder.KeystoneForwarderForwarderAdded
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (*forwarder.KeystoneForwarderForwarderAdded, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) *forwarder.KeystoneForwarderForwarderAdded); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*forwarder.KeystoneForwarderForwarderAdded)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeystoneForwarderInterface_ParseForwarderAdded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseForwarderAdded'
type KeystoneForwarderInterface_ParseForwarderAdded_Call struct {
	*mock.Call
}

// ParseForwarderAdded is a helper method to define mock.On call
//   - log types.Log
func (_e *KeystoneForwarderInterface_Expecter) ParseForwarderAdded(log interface{}) *KeystoneForwarderInterface_ParseForwarderAdded_Call {
	return &KeystoneForwarderInterface_ParseForwarderAdded_Call{Call: _e.mock.On("ParseForwarderAdded", log)}
}

func (_c *KeystoneForwarderInterface_ParseForwarderAdded_Call) Run(run func(log types.Log)) *KeystoneForwarderInterface_ParseForwarderAdded_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Log))
	})
	return _c
}

func (_c *KeystoneForwarderInterface_ParseForwarderAdded_Call) Return(_a0 *forwarder.KeystoneForwarderForwarderAdded, _a1 error) *KeystoneForwarderInterface_ParseForwarderAdded_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KeystoneForwarderInterface_ParseForwarderAdded_Call) RunAndReturn(run func(types.Log) (*forwarder.KeystoneForwarderForwarderAdded, error)) *KeystoneForwarderInterface_ParseForwarderAdded_Call {
	_c.Call.Return(run)
	return _c
}

// ParseForwarderRemoved provides a mock function with given fields: log
func (_m *KeystoneForwarderInterface) ParseForwarderRemoved(log types.Log) (*forwarder.KeystoneForwarderForwarderRemoved, error) {
	ret := _m.Called(log)

	if len(ret) == 0 {
		panic("no return value specified for ParseForwarderRemoved")
	}

	var r0 *forwarder.KeystoneForwarderForwarderRemoved
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (*forwarder.KeystoneForwarderForwarderRemoved, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) *forwarder.KeystoneForwarderForwarderRemoved); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*forwarder.KeystoneForwarderForwarderRemoved)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeystoneForwarderInterface_ParseForwarderRemoved_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseForwarderRemoved'
type KeystoneForwarderInterface_ParseForwarderRemoved_Call struct {
	*mock.Call
}

// ParseForwarderRemoved is a helper method to define mock.On call
//   - log types.Log
func (_e *KeystoneForwarderInterface_Expecter) ParseForwarderRemoved(log interface{}) *KeystoneForwarderInterface_ParseForwarderRemoved_Call {
	return &KeystoneForwarderInterface_ParseForwarderRemoved_Call{Call: _e.mock.On("ParseForwarderRemoved", log)}
}

func (_c *KeystoneForwarderInterface_ParseForwarderRemoved_Call) Run(run func(log types.Log)) *KeystoneForwarderInterface_ParseForwarderRemoved_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Log))
	})
	return _c
}

func (_c *KeystoneForwarderInterface_ParseForwarderRemoved_Call) Return(_a0 *forwarder.KeystoneForwarderForwarderRemoved, _a1 error) *KeystoneForwarderInterface_ParseForwarderRemoved_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KeystoneForwarderInterface_ParseForwarderRemoved_Call) RunAndReturn(run func(types.Log) (*forwarder.KeystoneForwarderForwarderRemoved, error)) *KeystoneForwarderInterface_ParseForwarderRemoved_Call {
	_c.Call.Return(run)
	return _c
}

// ParseLog provides a mock function with given fields: log
func (_m *KeystoneForwarderInterface) ParseLog(log types.Log) (generated.AbigenLog, error) {
	ret := _m.Called(log)

	if len(ret) == 0 {
		panic("no return value specified for ParseLog")
	}

	var r0 generated.AbigenLog
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (generated.AbigenLog, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) generated.AbigenLog); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(generated.AbigenLog)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeystoneForwarderInterface_ParseLog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseLog'
type KeystoneForwarderInterface_ParseLog_Call struct {
	*mock.Call
}

// ParseLog is a helper method to define mock.On call
//   - log types.Log
func (_e *KeystoneForwarderInterface_Expecter) ParseLog(log interface{}) *KeystoneForwarderInterface_ParseLog_Call {
	return &KeystoneForwarderInterface_ParseLog_Call{Call: _e.mock.On("ParseLog", log)}
}

func (_c *KeystoneForwarderInterface_ParseLog_Call) Run(run func(log types.Log)) *KeystoneForwarderInterface_ParseLog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Log))
	})
	return _c
}

func (_c *KeystoneForwarderInterface_ParseLog_Call) Return(_a0 generated.AbigenLog, _a1 error) *KeystoneForwarderInterface_ParseLog_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KeystoneForwarderInterface_ParseLog_Call) RunAndReturn(run func(types.Log) (generated.AbigenLog, error)) *KeystoneForwarderInterface_ParseLog_Call {
	_c.Call.Return(run)
	return _c
}

// ParseOwnershipTransferRequested provides a mock function with given fields: log
func (_m *KeystoneForwarderInterface) ParseOwnershipTransferRequested(log types.Log) (*forwarder.KeystoneForwarderOwnershipTransferRequested, error) {
	ret := _m.Called(log)

	if len(ret) == 0 {
		panic("no return value specified for ParseOwnershipTransferRequested")
	}

	var r0 *forwarder.KeystoneForwarderOwnershipTransferRequested
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (*forwarder.KeystoneForwarderOwnershipTransferRequested, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) *forwarder.KeystoneForwarderOwnershipTransferRequested); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*forwarder.KeystoneForwarderOwnershipTransferRequested)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeystoneForwarderInterface_ParseOwnershipTransferRequested_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseOwnershipTransferRequested'
type KeystoneForwarderInterface_ParseOwnershipTransferRequested_Call struct {
	*mock.Call
}

// ParseOwnershipTransferRequested is a helper method to define mock.On call
//   - log types.Log
func (_e *KeystoneForwarderInterface_Expecter) ParseOwnershipTransferRequested(log interface{}) *KeystoneForwarderInterface_ParseOwnershipTransferRequested_Call {
	return &KeystoneForwarderInterface_ParseOwnershipTransferRequested_Call{Call: _e.mock.On("ParseOwnershipTransferRequested", log)}
}

func (_c *KeystoneForwarderInterface_ParseOwnershipTransferRequested_Call) Run(run func(log types.Log)) *KeystoneForwarderInterface_ParseOwnershipTransferRequested_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Log))
	})
	return _c
}

func (_c *KeystoneForwarderInterface_ParseOwnershipTransferRequested_Call) Return(_a0 *forwarder.KeystoneForwarderOwnershipTransferRequested, _a1 error) *KeystoneForwarderInterface_ParseOwnershipTransferRequested_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KeystoneForwarderInterface_ParseOwnershipTransferRequested_Call) RunAndReturn(run func(types.Log) (*forwarder.KeystoneForwarderOwnershipTransferRequested, error)) *KeystoneForwarderInterface_ParseOwnershipTransferRequested_Call {
	_c.Call.Return(run)
	return _c
}

// ParseOwnershipTransferred provides a mock function with given fields: log
func (_m *KeystoneForwarderInterface) ParseOwnershipTransferred(log types.Log) (*forwarder.KeystoneForwarderOwnershipTransferred, error) {
	ret := _m.Called(log)

	if len(ret) == 0 {
		panic("no return value specified for ParseOwnershipTransferred")
	}

	var r0 *forwarder.KeystoneForwarderOwnershipTransferred
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (*forwarder.KeystoneForwarderOwnershipTransferred, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) *forwarder.KeystoneForwarderOwnershipTransferred); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*forwarder.KeystoneForwarderOwnershipTransferred)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeystoneForwarderInterface_ParseOwnershipTransferred_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseOwnershipTransferred'
type KeystoneForwarderInterface_ParseOwnershipTransferred_Call struct {
	*mock.Call
}

// ParseOwnershipTransferred is a helper method to define mock.On call
//   - log types.Log
func (_e *KeystoneForwarderInterface_Expecter) ParseOwnershipTransferred(log interface{}) *KeystoneForwarderInterface_ParseOwnershipTransferred_Call {
	return &KeystoneForwarderInterface_ParseOwnershipTransferred_Call{Call: _e.mock.On("ParseOwnershipTransferred", log)}
}

func (_c *KeystoneForwarderInterface_ParseOwnershipTransferred_Call) Run(run func(log types.Log)) *KeystoneForwarderInterface_ParseOwnershipTransferred_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Log))
	})
	return _c
}

func (_c *KeystoneForwarderInterface_ParseOwnershipTransferred_Call) Return(_a0 *forwarder.KeystoneForwarderOwnershipTransferred, _a1 error) *KeystoneForwarderInterface_ParseOwnershipTransferred_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KeystoneForwarderInterface_ParseOwnershipTransferred_Call) RunAndReturn(run func(types.Log) (*forwarder.KeystoneForwarderOwnershipTransferred, error)) *KeystoneForwarderInterface_ParseOwnershipTransferred_Call {
	_c.Call.Return(run)
	return _c
}

// ParseReportProcessed provides a mock function with given fields: log
func (_m *KeystoneForwarderInterface) ParseReportProcessed(log types.Log) (*forwarder.KeystoneForwarderReportProcessed, error) {
	ret := _m.Called(log)

	if len(ret) == 0 {
		panic("no return value specified for ParseReportProcessed")
	}

	var r0 *forwarder.KeystoneForwarderReportProcessed
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (*forwarder.KeystoneForwarderReportProcessed, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) *forwarder.KeystoneForwarderReportProcessed); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*forwarder.KeystoneForwarderReportProcessed)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeystoneForwarderInterface_ParseReportProcessed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseReportProcessed'
type KeystoneForwarderInterface_ParseReportProcessed_Call struct {
	*mock.Call
}

// ParseReportProcessed is a helper method to define mock.On call
//   - log types.Log
func (_e *KeystoneForwarderInterface_Expecter) ParseReportProcessed(log interface{}) *KeystoneForwarderInterface_ParseReportProcessed_Call {
	return &KeystoneForwarderInterface_ParseReportProcessed_Call{Call: _e.mock.On("ParseReportProcessed", log)}
}

func (_c *KeystoneForwarderInterface_ParseReportProcessed_Call) Run(run func(log types.Log)) *KeystoneForwarderInterface_ParseReportProcessed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Log))
	})
	return _c
}

func (_c *KeystoneForwarderInterface_ParseReportProcessed_Call) Return(_a0 *forwarder.KeystoneForwarderReportProcessed, _a1 error) *KeystoneForwarderInterface_ParseReportProcessed_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KeystoneForwarderInterface_ParseReportProcessed_Call) RunAndReturn(run func(types.Log) (*forwarder.KeystoneForwarderReportProcessed, error)) *KeystoneForwarderInterface_ParseReportProcessed_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveForwarder provides a mock function with given fields: opts, _a1
func (_m *KeystoneForwarderInterface) RemoveForwarder(opts *bind.TransactOpts, _a1 common.Address) (*types.Transaction, error) {
	ret := _m.Called(opts, _a1)

	if len(ret) == 0 {
		panic("no return value specified for RemoveForwarder")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address) (*types.Transaction, error)); ok {
		return rf(opts, _a1)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address) *types.Transaction); ok {
		r0 = rf(opts, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address) error); ok {
		r1 = rf(opts, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeystoneForwarderInterface_RemoveForwarder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveForwarder'
type KeystoneForwarderInterface_RemoveForwarder_Call struct {
	*mock.Call
}

// RemoveForwarder is a helper method to define mock.On call
//   - opts *bind.TransactOpts
//   - _a1 common.Address
func (_e *KeystoneForwarderInterface_Expecter) RemoveForwarder(opts interface{}, _a1 interface{}) *KeystoneForwarderInterface_RemoveForwarder_Call {
	return &KeystoneForwarderInterface_RemoveForwarder_Call{Call: _e.mock.On("RemoveForwarder", opts, _a1)}
}

func (_c *KeystoneForwarderInterface_RemoveForwarder_Call) Run(run func(opts *bind.TransactOpts, _a1 common.Address)) *KeystoneForwarderInterface_RemoveForwarder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts), args[1].(common.Address))
	})
	return _c
}

func (_c *KeystoneForwarderInterface_RemoveForwarder_Call) Return(_a0 *types.Transaction, _a1 error) *KeystoneForwarderInterface_RemoveForwarder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KeystoneForwarderInterface_RemoveForwarder_Call) RunAndReturn(run func(*bind.TransactOpts, common.Address) (*types.Transaction, error)) *KeystoneForwarderInterface_RemoveForwarder_Call {
	_c.Call.Return(run)
	return _c
}

// Report provides a mock function with given fields: opts, receiver, rawReport, reportContext, signatures
func (_m *KeystoneForwarderInterface) Report(opts *bind.TransactOpts, receiver common.Address, rawReport []byte, reportContext []byte, signatures [][]byte) (*types.Transaction, error) {
	ret := _m.Called(opts, receiver, rawReport, reportContext, signatures)

	if len(ret) == 0 {
		panic("no return value specified for Report")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, []byte, []byte, [][]byte) (*types.Transaction, error)); ok {
		return rf(opts, receiver, rawReport, reportContext, signatures)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address, []byte, []byte, [][]byte) *types.Transaction); ok {
		r0 = rf(opts, receiver, rawReport, reportContext, signatures)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address, []byte, []byte, [][]byte) error); ok {
		r1 = rf(opts, receiver, rawReport, reportContext, signatures)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeystoneForwarderInterface_Report_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Report'
type KeystoneForwarderInterface_Report_Call struct {
	*mock.Call
}

// Report is a helper method to define mock.On call
//   - opts *bind.TransactOpts
//   - receiver common.Address
//   - rawReport []byte
//   - reportContext []byte
//   - signatures [][]byte
func (_e *KeystoneForwarderInterface_Expecter) Report(opts interface{}, receiver interface{}, rawReport interface{}, reportContext interface{}, signatures interface{}) *KeystoneForwarderInterface_Report_Call {
	return &KeystoneForwarderInterface_Report_Call{Call: _e.mock.On("Report", opts, receiver, rawReport, reportContext, signatures)}
}

func (_c *KeystoneForwarderInterface_Report_Call) Run(run func(opts *bind.TransactOpts, receiver common.Address, rawReport []byte, reportContext []byte, signatures [][]byte)) *KeystoneForwarderInterface_Report_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts), args[1].(common.Address), args[2].([]byte), args[3].([]byte), args[4].([][]byte))
	})
	return _c
}

func (_c *KeystoneForwarderInterface_Report_Call) Return(_a0 *types.Transaction, _a1 error) *KeystoneForwarderInterface_Report_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KeystoneForwarderInterface_Report_Call) RunAndReturn(run func(*bind.TransactOpts, common.Address, []byte, []byte, [][]byte) (*types.Transaction, error)) *KeystoneForwarderInterface_Report_Call {
	_c.Call.Return(run)
	return _c
}

// Route provides a mock function with given fields: opts, transmissionId, transmitter, receiver, metadata, validatedReport
func (_m *KeystoneForwarderInterface) Route(opts *bind.TransactOpts, transmissionId [32]byte, transmitter common.Address, receiver common.Address, metadata []byte, validatedReport []byte) (*types.Transaction, error) {
	ret := _m.Called(opts, transmissionId, transmitter, receiver, metadata, validatedReport)

	if len(ret) == 0 {
		panic("no return value specified for Route")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, [32]byte, common.Address, common.Address, []byte, []byte) (*types.Transaction, error)); ok {
		return rf(opts, transmissionId, transmitter, receiver, metadata, validatedReport)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, [32]byte, common.Address, common.Address, []byte, []byte) *types.Transaction); ok {
		r0 = rf(opts, transmissionId, transmitter, receiver, metadata, validatedReport)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, [32]byte, common.Address, common.Address, []byte, []byte) error); ok {
		r1 = rf(opts, transmissionId, transmitter, receiver, metadata, validatedReport)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeystoneForwarderInterface_Route_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Route'
type KeystoneForwarderInterface_Route_Call struct {
	*mock.Call
}

// Route is a helper method to define mock.On call
//   - opts *bind.TransactOpts
//   - transmissionId [32]byte
//   - transmitter common.Address
//   - receiver common.Address
//   - metadata []byte
//   - validatedReport []byte
func (_e *KeystoneForwarderInterface_Expecter) Route(opts interface{}, transmissionId interface{}, transmitter interface{}, receiver interface{}, metadata interface{}, validatedReport interface{}) *KeystoneForwarderInterface_Route_Call {
	return &KeystoneForwarderInterface_Route_Call{Call: _e.mock.On("Route", opts, transmissionId, transmitter, receiver, metadata, validatedReport)}
}

func (_c *KeystoneForwarderInterface_Route_Call) Run(run func(opts *bind.TransactOpts, transmissionId [32]byte, transmitter common.Address, receiver common.Address, metadata []byte, validatedReport []byte)) *KeystoneForwarderInterface_Route_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts), args[1].([32]byte), args[2].(common.Address), args[3].(common.Address), args[4].([]byte), args[5].([]byte))
	})
	return _c
}

func (_c *KeystoneForwarderInterface_Route_Call) Return(_a0 *types.Transaction, _a1 error) *KeystoneForwarderInterface_Route_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KeystoneForwarderInterface_Route_Call) RunAndReturn(run func(*bind.TransactOpts, [32]byte, common.Address, common.Address, []byte, []byte) (*types.Transaction, error)) *KeystoneForwarderInterface_Route_Call {
	_c.Call.Return(run)
	return _c
}

// SetConfig provides a mock function with given fields: opts, donId, configVersion, f, signers
func (_m *KeystoneForwarderInterface) SetConfig(opts *bind.TransactOpts, donId uint32, configVersion uint32, f uint8, signers []common.Address) (*types.Transaction, error) {
	ret := _m.Called(opts, donId, configVersion, f, signers)

	if len(ret) == 0 {
		panic("no return value specified for SetConfig")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, uint32, uint32, uint8, []common.Address) (*types.Transaction, error)); ok {
		return rf(opts, donId, configVersion, f, signers)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, uint32, uint32, uint8, []common.Address) *types.Transaction); ok {
		r0 = rf(opts, donId, configVersion, f, signers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, uint32, uint32, uint8, []common.Address) error); ok {
		r1 = rf(opts, donId, configVersion, f, signers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeystoneForwarderInterface_SetConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetConfig'
type KeystoneForwarderInterface_SetConfig_Call struct {
	*mock.Call
}

// SetConfig is a helper method to define mock.On call
//   - opts *bind.TransactOpts
//   - donId uint32
//   - configVersion uint32
//   - f uint8
//   - signers []common.Address
func (_e *KeystoneForwarderInterface_Expecter) SetConfig(opts interface{}, donId interface{}, configVersion interface{}, f interface{}, signers interface{}) *KeystoneForwarderInterface_SetConfig_Call {
	return &KeystoneForwarderInterface_SetConfig_Call{Call: _e.mock.On("SetConfig", opts, donId, configVersion, f, signers)}
}

func (_c *KeystoneForwarderInterface_SetConfig_Call) Run(run func(opts *bind.TransactOpts, donId uint32, configVersion uint32, f uint8, signers []common.Address)) *KeystoneForwarderInterface_SetConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts), args[1].(uint32), args[2].(uint32), args[3].(uint8), args[4].([]common.Address))
	})
	return _c
}

func (_c *KeystoneForwarderInterface_SetConfig_Call) Return(_a0 *types.Transaction, _a1 error) *KeystoneForwarderInterface_SetConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KeystoneForwarderInterface_SetConfig_Call) RunAndReturn(run func(*bind.TransactOpts, uint32, uint32, uint8, []common.Address) (*types.Transaction, error)) *KeystoneForwarderInterface_SetConfig_Call {
	_c.Call.Return(run)
	return _c
}

// TransferOwnership provides a mock function with given fields: opts, to
func (_m *KeystoneForwarderInterface) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	ret := _m.Called(opts, to)

	if len(ret) == 0 {
		panic("no return value specified for TransferOwnership")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address) (*types.Transaction, error)); ok {
		return rf(opts, to)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address) *types.Transaction); ok {
		r0 = rf(opts, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address) error); ok {
		r1 = rf(opts, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeystoneForwarderInterface_TransferOwnership_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransferOwnership'
type KeystoneForwarderInterface_TransferOwnership_Call struct {
	*mock.Call
}

// TransferOwnership is a helper method to define mock.On call
//   - opts *bind.TransactOpts
//   - to common.Address
func (_e *KeystoneForwarderInterface_Expecter) TransferOwnership(opts interface{}, to interface{}) *KeystoneForwarderInterface_TransferOwnership_Call {
	return &KeystoneForwarderInterface_TransferOwnership_Call{Call: _e.mock.On("TransferOwnership", opts, to)}
}

func (_c *KeystoneForwarderInterface_TransferOwnership_Call) Run(run func(opts *bind.TransactOpts, to common.Address)) *KeystoneForwarderInterface_TransferOwnership_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts), args[1].(common.Address))
	})
	return _c
}

func (_c *KeystoneForwarderInterface_TransferOwnership_Call) Return(_a0 *types.Transaction, _a1 error) *KeystoneForwarderInterface_TransferOwnership_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KeystoneForwarderInterface_TransferOwnership_Call) RunAndReturn(run func(*bind.TransactOpts, common.Address) (*types.Transaction, error)) *KeystoneForwarderInterface_TransferOwnership_Call {
	_c.Call.Return(run)
	return _c
}

// TypeAndVersion provides a mock function with given fields: opts
func (_m *KeystoneForwarderInterface) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for TypeAndVersion")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) (string, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) string); ok {
		r0 = rf(opts)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeystoneForwarderInterface_TypeAndVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeAndVersion'
type KeystoneForwarderInterface_TypeAndVersion_Call struct {
	*mock.Call
}

// TypeAndVersion is a helper method to define mock.On call
//   - opts *bind.CallOpts
func (_e *KeystoneForwarderInterface_Expecter) TypeAndVersion(opts interface{}) *KeystoneForwarderInterface_TypeAndVersion_Call {
	return &KeystoneForwarderInterface_TypeAndVersion_Call{Call: _e.mock.On("TypeAndVersion", opts)}
}

func (_c *KeystoneForwarderInterface_TypeAndVersion_Call) Run(run func(opts *bind.CallOpts)) *KeystoneForwarderInterface_TypeAndVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts))
	})
	return _c
}

func (_c *KeystoneForwarderInterface_TypeAndVersion_Call) Return(_a0 string, _a1 error) *KeystoneForwarderInterface_TypeAndVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KeystoneForwarderInterface_TypeAndVersion_Call) RunAndReturn(run func(*bind.CallOpts) (string, error)) *KeystoneForwarderInterface_TypeAndVersion_Call {
	_c.Call.Return(run)
	return _c
}

// WatchConfigSet provides a mock function with given fields: opts, sink, donId, configVersion
func (_m *KeystoneForwarderInterface) WatchConfigSet(opts *bind.WatchOpts, sink chan<- *forwarder.KeystoneForwarderConfigSet, donId []uint32, configVersion []uint32) (event.Subscription, error) {
	ret := _m.Called(opts, sink, donId, configVersion)

	if len(ret) == 0 {
		panic("no return value specified for WatchConfigSet")
	}

	var r0 event.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *forwarder.KeystoneForwarderConfigSet, []uint32, []uint32) (event.Subscription, error)); ok {
		return rf(opts, sink, donId, configVersion)
	}
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *forwarder.KeystoneForwarderConfigSet, []uint32, []uint32) event.Subscription); ok {
		r0 = rf(opts, sink, donId, configVersion)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *forwarder.KeystoneForwarderConfigSet, []uint32, []uint32) error); ok {
		r1 = rf(opts, sink, donId, configVersion)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeystoneForwarderInterface_WatchConfigSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchConfigSet'
type KeystoneForwarderInterface_WatchConfigSet_Call struct {
	*mock.Call
}

// WatchConfigSet is a helper method to define mock.On call
//   - opts *bind.WatchOpts
//   - sink chan<- *forwarder.KeystoneForwarderConfigSet
//   - donId []uint32
//   - configVersion []uint32
func (_e *KeystoneForwarderInterface_Expecter) WatchConfigSet(opts interface{}, sink interface{}, donId interface{}, configVersion interface{}) *KeystoneForwarderInterface_WatchConfigSet_Call {
	return &KeystoneForwarderInterface_WatchConfigSet_Call{Call: _e.mock.On("WatchConfigSet", opts, sink, donId, configVersion)}
}

func (_c *KeystoneForwarderInterface_WatchConfigSet_Call) Run(run func(opts *bind.WatchOpts, sink chan<- *forwarder.KeystoneForwarderConfigSet, donId []uint32, configVersion []uint32)) *KeystoneForwarderInterface_WatchConfigSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.WatchOpts), args[1].(chan<- *forwarder.KeystoneForwarderConfigSet), args[2].([]uint32), args[3].([]uint32))
	})
	return _c
}

func (_c *KeystoneForwarderInterface_WatchConfigSet_Call) Return(_a0 event.Subscription, _a1 error) *KeystoneForwarderInterface_WatchConfigSet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KeystoneForwarderInterface_WatchConfigSet_Call) RunAndReturn(run func(*bind.WatchOpts, chan<- *forwarder.KeystoneForwarderConfigSet, []uint32, []uint32) (event.Subscription, error)) *KeystoneForwarderInterface_WatchConfigSet_Call {
	_c.Call.Return(run)
	return _c
}

// WatchForwarderAdded provides a mock function with given fields: opts, sink, _a2
func (_m *KeystoneForwarderInterface) WatchForwarderAdded(opts *bind.WatchOpts, sink chan<- *forwarder.KeystoneForwarderForwarderAdded, _a2 []common.Address) (event.Subscription, error) {
	ret := _m.Called(opts, sink, _a2)

	if len(ret) == 0 {
		panic("no return value specified for WatchForwarderAdded")
	}

	var r0 event.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *forwarder.KeystoneForwarderForwarderAdded, []common.Address) (event.Subscription, error)); ok {
		return rf(opts, sink, _a2)
	}
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *forwarder.KeystoneForwarderForwarderAdded, []common.Address) event.Subscription); ok {
		r0 = rf(opts, sink, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *forwarder.KeystoneForwarderForwarderAdded, []common.Address) error); ok {
		r1 = rf(opts, sink, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeystoneForwarderInterface_WatchForwarderAdded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchForwarderAdded'
type KeystoneForwarderInterface_WatchForwarderAdded_Call struct {
	*mock.Call
}

// WatchForwarderAdded is a helper method to define mock.On call
//   - opts *bind.WatchOpts
//   - sink chan<- *forwarder.KeystoneForwarderForwarderAdded
//   - _a2 []common.Address
func (_e *KeystoneForwarderInterface_Expecter) WatchForwarderAdded(opts interface{}, sink interface{}, _a2 interface{}) *KeystoneForwarderInterface_WatchForwarderAdded_Call {
	return &KeystoneForwarderInterface_WatchForwarderAdded_Call{Call: _e.mock.On("WatchForwarderAdded", opts, sink, _a2)}
}

func (_c *KeystoneForwarderInterface_WatchForwarderAdded_Call) Run(run func(opts *bind.WatchOpts, sink chan<- *forwarder.KeystoneForwarderForwarderAdded, _a2 []common.Address)) *KeystoneForwarderInterface_WatchForwarderAdded_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.WatchOpts), args[1].(chan<- *forwarder.KeystoneForwarderForwarderAdded), args[2].([]common.Address))
	})
	return _c
}

func (_c *KeystoneForwarderInterface_WatchForwarderAdded_Call) Return(_a0 event.Subscription, _a1 error) *KeystoneForwarderInterface_WatchForwarderAdded_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KeystoneForwarderInterface_WatchForwarderAdded_Call) RunAndReturn(run func(*bind.WatchOpts, chan<- *forwarder.KeystoneForwarderForwarderAdded, []common.Address) (event.Subscription, error)) *KeystoneForwarderInterface_WatchForwarderAdded_Call {
	_c.Call.Return(run)
	return _c
}

// WatchForwarderRemoved provides a mock function with given fields: opts, sink, _a2
func (_m *KeystoneForwarderInterface) WatchForwarderRemoved(opts *bind.WatchOpts, sink chan<- *forwarder.KeystoneForwarderForwarderRemoved, _a2 []common.Address) (event.Subscription, error) {
	ret := _m.Called(opts, sink, _a2)

	if len(ret) == 0 {
		panic("no return value specified for WatchForwarderRemoved")
	}

	var r0 event.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *forwarder.KeystoneForwarderForwarderRemoved, []common.Address) (event.Subscription, error)); ok {
		return rf(opts, sink, _a2)
	}
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *forwarder.KeystoneForwarderForwarderRemoved, []common.Address) event.Subscription); ok {
		r0 = rf(opts, sink, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *forwarder.KeystoneForwarderForwarderRemoved, []common.Address) error); ok {
		r1 = rf(opts, sink, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeystoneForwarderInterface_WatchForwarderRemoved_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchForwarderRemoved'
type KeystoneForwarderInterface_WatchForwarderRemoved_Call struct {
	*mock.Call
}

// WatchForwarderRemoved is a helper method to define mock.On call
//   - opts *bind.WatchOpts
//   - sink chan<- *forwarder.KeystoneForwarderForwarderRemoved
//   - _a2 []common.Address
func (_e *KeystoneForwarderInterface_Expecter) WatchForwarderRemoved(opts interface{}, sink interface{}, _a2 interface{}) *KeystoneForwarderInterface_WatchForwarderRemoved_Call {
	return &KeystoneForwarderInterface_WatchForwarderRemoved_Call{Call: _e.mock.On("WatchForwarderRemoved", opts, sink, _a2)}
}

func (_c *KeystoneForwarderInterface_WatchForwarderRemoved_Call) Run(run func(opts *bind.WatchOpts, sink chan<- *forwarder.KeystoneForwarderForwarderRemoved, _a2 []common.Address)) *KeystoneForwarderInterface_WatchForwarderRemoved_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.WatchOpts), args[1].(chan<- *forwarder.KeystoneForwarderForwarderRemoved), args[2].([]common.Address))
	})
	return _c
}

func (_c *KeystoneForwarderInterface_WatchForwarderRemoved_Call) Return(_a0 event.Subscription, _a1 error) *KeystoneForwarderInterface_WatchForwarderRemoved_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KeystoneForwarderInterface_WatchForwarderRemoved_Call) RunAndReturn(run func(*bind.WatchOpts, chan<- *forwarder.KeystoneForwarderForwarderRemoved, []common.Address) (event.Subscription, error)) *KeystoneForwarderInterface_WatchForwarderRemoved_Call {
	_c.Call.Return(run)
	return _c
}

// WatchOwnershipTransferRequested provides a mock function with given fields: opts, sink, from, to
func (_m *KeystoneForwarderInterface) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *forwarder.KeystoneForwarderOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {
	ret := _m.Called(opts, sink, from, to)

	if len(ret) == 0 {
		panic("no return value specified for WatchOwnershipTransferRequested")
	}

	var r0 event.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *forwarder.KeystoneForwarderOwnershipTransferRequested, []common.Address, []common.Address) (event.Subscription, error)); ok {
		return rf(opts, sink, from, to)
	}
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *forwarder.KeystoneForwarderOwnershipTransferRequested, []common.Address, []common.Address) event.Subscription); ok {
		r0 = rf(opts, sink, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *forwarder.KeystoneForwarderOwnershipTransferRequested, []common.Address, []common.Address) error); ok {
		r1 = rf(opts, sink, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeystoneForwarderInterface_WatchOwnershipTransferRequested_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchOwnershipTransferRequested'
type KeystoneForwarderInterface_WatchOwnershipTransferRequested_Call struct {
	*mock.Call
}

// WatchOwnershipTransferRequested is a helper method to define mock.On call
//   - opts *bind.WatchOpts
//   - sink chan<- *forwarder.KeystoneForwarderOwnershipTransferRequested
//   - from []common.Address
//   - to []common.Address
func (_e *KeystoneForwarderInterface_Expecter) WatchOwnershipTransferRequested(opts interface{}, sink interface{}, from interface{}, to interface{}) *KeystoneForwarderInterface_WatchOwnershipTransferRequested_Call {
	return &KeystoneForwarderInterface_WatchOwnershipTransferRequested_Call{Call: _e.mock.On("WatchOwnershipTransferRequested", opts, sink, from, to)}
}

func (_c *KeystoneForwarderInterface_WatchOwnershipTransferRequested_Call) Run(run func(opts *bind.WatchOpts, sink chan<- *forwarder.KeystoneForwarderOwnershipTransferRequested, from []common.Address, to []common.Address)) *KeystoneForwarderInterface_WatchOwnershipTransferRequested_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.WatchOpts), args[1].(chan<- *forwarder.KeystoneForwarderOwnershipTransferRequested), args[2].([]common.Address), args[3].([]common.Address))
	})
	return _c
}

func (_c *KeystoneForwarderInterface_WatchOwnershipTransferRequested_Call) Return(_a0 event.Subscription, _a1 error) *KeystoneForwarderInterface_WatchOwnershipTransferRequested_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KeystoneForwarderInterface_WatchOwnershipTransferRequested_Call) RunAndReturn(run func(*bind.WatchOpts, chan<- *forwarder.KeystoneForwarderOwnershipTransferRequested, []common.Address, []common.Address) (event.Subscription, error)) *KeystoneForwarderInterface_WatchOwnershipTransferRequested_Call {
	_c.Call.Return(run)
	return _c
}

// WatchOwnershipTransferred provides a mock function with given fields: opts, sink, from, to
func (_m *KeystoneForwarderInterface) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *forwarder.KeystoneForwarderOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {
	ret := _m.Called(opts, sink, from, to)

	if len(ret) == 0 {
		panic("no return value specified for WatchOwnershipTransferred")
	}

	var r0 event.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *forwarder.KeystoneForwarderOwnershipTransferred, []common.Address, []common.Address) (event.Subscription, error)); ok {
		return rf(opts, sink, from, to)
	}
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *forwarder.KeystoneForwarderOwnershipTransferred, []common.Address, []common.Address) event.Subscription); ok {
		r0 = rf(opts, sink, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *forwarder.KeystoneForwarderOwnershipTransferred, []common.Address, []common.Address) error); ok {
		r1 = rf(opts, sink, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeystoneForwarderInterface_WatchOwnershipTransferred_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchOwnershipTransferred'
type KeystoneForwarderInterface_WatchOwnershipTransferred_Call struct {
	*mock.Call
}

// WatchOwnershipTransferred is a helper method to define mock.On call
//   - opts *bind.WatchOpts
//   - sink chan<- *forwarder.KeystoneForwarderOwnershipTransferred
//   - from []common.Address
//   - to []common.Address
func (_e *KeystoneForwarderInterface_Expecter) WatchOwnershipTransferred(opts interface{}, sink interface{}, from interface{}, to interface{}) *KeystoneForwarderInterface_WatchOwnershipTransferred_Call {
	return &KeystoneForwarderInterface_WatchOwnershipTransferred_Call{Call: _e.mock.On("WatchOwnershipTransferred", opts, sink, from, to)}
}

func (_c *KeystoneForwarderInterface_WatchOwnershipTransferred_Call) Run(run func(opts *bind.WatchOpts, sink chan<- *forwarder.KeystoneForwarderOwnershipTransferred, from []common.Address, to []common.Address)) *KeystoneForwarderInterface_WatchOwnershipTransferred_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.WatchOpts), args[1].(chan<- *forwarder.KeystoneForwarderOwnershipTransferred), args[2].([]common.Address), args[3].([]common.Address))
	})
	return _c
}

func (_c *KeystoneForwarderInterface_WatchOwnershipTransferred_Call) Return(_a0 event.Subscription, _a1 error) *KeystoneForwarderInterface_WatchOwnershipTransferred_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KeystoneForwarderInterface_WatchOwnershipTransferred_Call) RunAndReturn(run func(*bind.WatchOpts, chan<- *forwarder.KeystoneForwarderOwnershipTransferred, []common.Address, []common.Address) (event.Subscription, error)) *KeystoneForwarderInterface_WatchOwnershipTransferred_Call {
	_c.Call.Return(run)
	return _c
}

// WatchReportProcessed provides a mock function with given fields: opts, sink, receiver, workflowExecutionId, reportId
func (_m *KeystoneForwarderInterface) WatchReportProcessed(opts *bind.WatchOpts, sink chan<- *forwarder.KeystoneForwarderReportProcessed, receiver []common.Address, workflowExecutionId [][32]byte, reportId [][2]byte) (event.Subscription, error) {
	ret := _m.Called(opts, sink, receiver, workflowExecutionId, reportId)

	if len(ret) == 0 {
		panic("no return value specified for WatchReportProcessed")
	}

	var r0 event.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *forwarder.KeystoneForwarderReportProcessed, []common.Address, [][32]byte, [][2]byte) (event.Subscription, error)); ok {
		return rf(opts, sink, receiver, workflowExecutionId, reportId)
	}
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *forwarder.KeystoneForwarderReportProcessed, []common.Address, [][32]byte, [][2]byte) event.Subscription); ok {
		r0 = rf(opts, sink, receiver, workflowExecutionId, reportId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *forwarder.KeystoneForwarderReportProcessed, []common.Address, [][32]byte, [][2]byte) error); ok {
		r1 = rf(opts, sink, receiver, workflowExecutionId, reportId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeystoneForwarderInterface_WatchReportProcessed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchReportProcessed'
type KeystoneForwarderInterface_WatchReportProcessed_Call struct {
	*mock.Call
}

// WatchReportProcessed is a helper method to define mock.On call
//   - opts *bind.WatchOpts
//   - sink chan<- *forwarder.KeystoneForwarderReportProcessed
//   - receiver []common.Address
//   - workflowExecutionId [][32]byte
//   - reportId [][2]byte
func (_e *KeystoneForwarderInterface_Expecter) WatchReportProcessed(opts interface{}, sink interface{}, receiver interface{}, workflowExecutionId interface{}, reportId interface{}) *KeystoneForwarderInterface_WatchReportProcessed_Call {
	return &KeystoneForwarderInterface_WatchReportProcessed_Call{Call: _e.mock.On("WatchReportProcessed", opts, sink, receiver, workflowExecutionId, reportId)}
}

func (_c *KeystoneForwarderInterface_WatchReportProcessed_Call) Run(run func(opts *bind.WatchOpts, sink chan<- *forwarder.KeystoneForwarderReportProcessed, receiver []common.Address, workflowExecutionId [][32]byte, reportId [][2]byte)) *KeystoneForwarderInterface_WatchReportProcessed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.WatchOpts), args[1].(chan<- *forwarder.KeystoneForwarderReportProcessed), args[2].([]common.Address), args[3].([][32]byte), args[4].([][2]byte))
	})
	return _c
}

func (_c *KeystoneForwarderInterface_WatchReportProcessed_Call) Return(_a0 event.Subscription, _a1 error) *KeystoneForwarderInterface_WatchReportProcessed_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *KeystoneForwarderInterface_WatchReportProcessed_Call) RunAndReturn(run func(*bind.WatchOpts, chan<- *forwarder.KeystoneForwarderReportProcessed, []common.Address, [][32]byte, [][2]byte) (event.Subscription, error)) *KeystoneForwarderInterface_WatchReportProcessed_Call {
	_c.Call.Return(run)
	return _c
}

// NewKeystoneForwarderInterface creates a new instance of KeystoneForwarderInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKeystoneForwarderInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *KeystoneForwarderInterface {
	mock := &KeystoneForwarderInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
