// Code generated by mockery v2.45.0. DO NOT EDIT.

package mock_contracts

import (
	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	common "github.com/ethereum/go-ethereum/common"

	event "github.com/ethereum/go-ethereum/event"

	generated "github.com/smartcontractkit/chainlink/v2/core/gethwrappers/generated"

	mock "github.com/stretchr/testify/mock"

	ocr3_capability "github.com/smartcontractkit/chainlink/v2/core/gethwrappers/keystone/generated/ocr3_capability"

	types "github.com/ethereum/go-ethereum/core/types"
)

// OCR3CapabilityInterface is an autogenerated mock type for the OCR3CapabilityInterface type
type OCR3CapabilityInterface struct {
	mock.Mock
}

type OCR3CapabilityInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *OCR3CapabilityInterface) EXPECT() *OCR3CapabilityInterface_Expecter {
	return &OCR3CapabilityInterface_Expecter{mock: &_m.Mock}
}

// AcceptOwnership provides a mock function with given fields: opts
func (_m *OCR3CapabilityInterface) AcceptOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for AcceptOwnership")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts) (*types.Transaction, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts) *types.Transaction); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OCR3CapabilityInterface_AcceptOwnership_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AcceptOwnership'
type OCR3CapabilityInterface_AcceptOwnership_Call struct {
	*mock.Call
}

// AcceptOwnership is a helper method to define mock.On call
//   - opts *bind.TransactOpts
func (_e *OCR3CapabilityInterface_Expecter) AcceptOwnership(opts interface{}) *OCR3CapabilityInterface_AcceptOwnership_Call {
	return &OCR3CapabilityInterface_AcceptOwnership_Call{Call: _e.mock.On("AcceptOwnership", opts)}
}

func (_c *OCR3CapabilityInterface_AcceptOwnership_Call) Run(run func(opts *bind.TransactOpts)) *OCR3CapabilityInterface_AcceptOwnership_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts))
	})
	return _c
}

func (_c *OCR3CapabilityInterface_AcceptOwnership_Call) Return(_a0 *types.Transaction, _a1 error) *OCR3CapabilityInterface_AcceptOwnership_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OCR3CapabilityInterface_AcceptOwnership_Call) RunAndReturn(run func(*bind.TransactOpts) (*types.Transaction, error)) *OCR3CapabilityInterface_AcceptOwnership_Call {
	_c.Call.Return(run)
	return _c
}

// Address provides a mock function with given fields:
func (_m *OCR3CapabilityInterface) Address() common.Address {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Address")
	}

	var r0 common.Address
	if rf, ok := ret.Get(0).(func() common.Address); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	return r0
}

// OCR3CapabilityInterface_Address_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Address'
type OCR3CapabilityInterface_Address_Call struct {
	*mock.Call
}

// Address is a helper method to define mock.On call
func (_e *OCR3CapabilityInterface_Expecter) Address() *OCR3CapabilityInterface_Address_Call {
	return &OCR3CapabilityInterface_Address_Call{Call: _e.mock.On("Address")}
}

func (_c *OCR3CapabilityInterface_Address_Call) Run(run func()) *OCR3CapabilityInterface_Address_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *OCR3CapabilityInterface_Address_Call) Return(_a0 common.Address) *OCR3CapabilityInterface_Address_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OCR3CapabilityInterface_Address_Call) RunAndReturn(run func() common.Address) *OCR3CapabilityInterface_Address_Call {
	_c.Call.Return(run)
	return _c
}

// FilterConfigSet provides a mock function with given fields: opts
func (_m *OCR3CapabilityInterface) FilterConfigSet(opts *bind.FilterOpts) (*ocr3_capability.OCR3CapabilityConfigSetIterator, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for FilterConfigSet")
	}

	var r0 *ocr3_capability.OCR3CapabilityConfigSetIterator
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts) (*ocr3_capability.OCR3CapabilityConfigSetIterator, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts) *ocr3_capability.OCR3CapabilityConfigSetIterator); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ocr3_capability.OCR3CapabilityConfigSetIterator)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.FilterOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OCR3CapabilityInterface_FilterConfigSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FilterConfigSet'
type OCR3CapabilityInterface_FilterConfigSet_Call struct {
	*mock.Call
}

// FilterConfigSet is a helper method to define mock.On call
//   - opts *bind.FilterOpts
func (_e *OCR3CapabilityInterface_Expecter) FilterConfigSet(opts interface{}) *OCR3CapabilityInterface_FilterConfigSet_Call {
	return &OCR3CapabilityInterface_FilterConfigSet_Call{Call: _e.mock.On("FilterConfigSet", opts)}
}

func (_c *OCR3CapabilityInterface_FilterConfigSet_Call) Run(run func(opts *bind.FilterOpts)) *OCR3CapabilityInterface_FilterConfigSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.FilterOpts))
	})
	return _c
}

func (_c *OCR3CapabilityInterface_FilterConfigSet_Call) Return(_a0 *ocr3_capability.OCR3CapabilityConfigSetIterator, _a1 error) *OCR3CapabilityInterface_FilterConfigSet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OCR3CapabilityInterface_FilterConfigSet_Call) RunAndReturn(run func(*bind.FilterOpts) (*ocr3_capability.OCR3CapabilityConfigSetIterator, error)) *OCR3CapabilityInterface_FilterConfigSet_Call {
	_c.Call.Return(run)
	return _c
}

// FilterOwnershipTransferRequested provides a mock function with given fields: opts, from, to
func (_m *OCR3CapabilityInterface) FilterOwnershipTransferRequested(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ocr3_capability.OCR3CapabilityOwnershipTransferRequestedIterator, error) {
	ret := _m.Called(opts, from, to)

	if len(ret) == 0 {
		panic("no return value specified for FilterOwnershipTransferRequested")
	}

	var r0 *ocr3_capability.OCR3CapabilityOwnershipTransferRequestedIterator
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address, []common.Address) (*ocr3_capability.OCR3CapabilityOwnershipTransferRequestedIterator, error)); ok {
		return rf(opts, from, to)
	}
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address, []common.Address) *ocr3_capability.OCR3CapabilityOwnershipTransferRequestedIterator); ok {
		r0 = rf(opts, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ocr3_capability.OCR3CapabilityOwnershipTransferRequestedIterator)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []common.Address, []common.Address) error); ok {
		r1 = rf(opts, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OCR3CapabilityInterface_FilterOwnershipTransferRequested_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FilterOwnershipTransferRequested'
type OCR3CapabilityInterface_FilterOwnershipTransferRequested_Call struct {
	*mock.Call
}

// FilterOwnershipTransferRequested is a helper method to define mock.On call
//   - opts *bind.FilterOpts
//   - from []common.Address
//   - to []common.Address
func (_e *OCR3CapabilityInterface_Expecter) FilterOwnershipTransferRequested(opts interface{}, from interface{}, to interface{}) *OCR3CapabilityInterface_FilterOwnershipTransferRequested_Call {
	return &OCR3CapabilityInterface_FilterOwnershipTransferRequested_Call{Call: _e.mock.On("FilterOwnershipTransferRequested", opts, from, to)}
}

func (_c *OCR3CapabilityInterface_FilterOwnershipTransferRequested_Call) Run(run func(opts *bind.FilterOpts, from []common.Address, to []common.Address)) *OCR3CapabilityInterface_FilterOwnershipTransferRequested_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.FilterOpts), args[1].([]common.Address), args[2].([]common.Address))
	})
	return _c
}

func (_c *OCR3CapabilityInterface_FilterOwnershipTransferRequested_Call) Return(_a0 *ocr3_capability.OCR3CapabilityOwnershipTransferRequestedIterator, _a1 error) *OCR3CapabilityInterface_FilterOwnershipTransferRequested_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OCR3CapabilityInterface_FilterOwnershipTransferRequested_Call) RunAndReturn(run func(*bind.FilterOpts, []common.Address, []common.Address) (*ocr3_capability.OCR3CapabilityOwnershipTransferRequestedIterator, error)) *OCR3CapabilityInterface_FilterOwnershipTransferRequested_Call {
	_c.Call.Return(run)
	return _c
}

// FilterOwnershipTransferred provides a mock function with given fields: opts, from, to
func (_m *OCR3CapabilityInterface) FilterOwnershipTransferred(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ocr3_capability.OCR3CapabilityOwnershipTransferredIterator, error) {
	ret := _m.Called(opts, from, to)

	if len(ret) == 0 {
		panic("no return value specified for FilterOwnershipTransferred")
	}

	var r0 *ocr3_capability.OCR3CapabilityOwnershipTransferredIterator
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address, []common.Address) (*ocr3_capability.OCR3CapabilityOwnershipTransferredIterator, error)); ok {
		return rf(opts, from, to)
	}
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts, []common.Address, []common.Address) *ocr3_capability.OCR3CapabilityOwnershipTransferredIterator); ok {
		r0 = rf(opts, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ocr3_capability.OCR3CapabilityOwnershipTransferredIterator)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.FilterOpts, []common.Address, []common.Address) error); ok {
		r1 = rf(opts, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OCR3CapabilityInterface_FilterOwnershipTransferred_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FilterOwnershipTransferred'
type OCR3CapabilityInterface_FilterOwnershipTransferred_Call struct {
	*mock.Call
}

// FilterOwnershipTransferred is a helper method to define mock.On call
//   - opts *bind.FilterOpts
//   - from []common.Address
//   - to []common.Address
func (_e *OCR3CapabilityInterface_Expecter) FilterOwnershipTransferred(opts interface{}, from interface{}, to interface{}) *OCR3CapabilityInterface_FilterOwnershipTransferred_Call {
	return &OCR3CapabilityInterface_FilterOwnershipTransferred_Call{Call: _e.mock.On("FilterOwnershipTransferred", opts, from, to)}
}

func (_c *OCR3CapabilityInterface_FilterOwnershipTransferred_Call) Run(run func(opts *bind.FilterOpts, from []common.Address, to []common.Address)) *OCR3CapabilityInterface_FilterOwnershipTransferred_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.FilterOpts), args[1].([]common.Address), args[2].([]common.Address))
	})
	return _c
}

func (_c *OCR3CapabilityInterface_FilterOwnershipTransferred_Call) Return(_a0 *ocr3_capability.OCR3CapabilityOwnershipTransferredIterator, _a1 error) *OCR3CapabilityInterface_FilterOwnershipTransferred_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OCR3CapabilityInterface_FilterOwnershipTransferred_Call) RunAndReturn(run func(*bind.FilterOpts, []common.Address, []common.Address) (*ocr3_capability.OCR3CapabilityOwnershipTransferredIterator, error)) *OCR3CapabilityInterface_FilterOwnershipTransferred_Call {
	_c.Call.Return(run)
	return _c
}

// FilterTransmitted provides a mock function with given fields: opts
func (_m *OCR3CapabilityInterface) FilterTransmitted(opts *bind.FilterOpts) (*ocr3_capability.OCR3CapabilityTransmittedIterator, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for FilterTransmitted")
	}

	var r0 *ocr3_capability.OCR3CapabilityTransmittedIterator
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts) (*ocr3_capability.OCR3CapabilityTransmittedIterator, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.FilterOpts) *ocr3_capability.OCR3CapabilityTransmittedIterator); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ocr3_capability.OCR3CapabilityTransmittedIterator)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.FilterOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OCR3CapabilityInterface_FilterTransmitted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FilterTransmitted'
type OCR3CapabilityInterface_FilterTransmitted_Call struct {
	*mock.Call
}

// FilterTransmitted is a helper method to define mock.On call
//   - opts *bind.FilterOpts
func (_e *OCR3CapabilityInterface_Expecter) FilterTransmitted(opts interface{}) *OCR3CapabilityInterface_FilterTransmitted_Call {
	return &OCR3CapabilityInterface_FilterTransmitted_Call{Call: _e.mock.On("FilterTransmitted", opts)}
}

func (_c *OCR3CapabilityInterface_FilterTransmitted_Call) Run(run func(opts *bind.FilterOpts)) *OCR3CapabilityInterface_FilterTransmitted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.FilterOpts))
	})
	return _c
}

func (_c *OCR3CapabilityInterface_FilterTransmitted_Call) Return(_a0 *ocr3_capability.OCR3CapabilityTransmittedIterator, _a1 error) *OCR3CapabilityInterface_FilterTransmitted_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OCR3CapabilityInterface_FilterTransmitted_Call) RunAndReturn(run func(*bind.FilterOpts) (*ocr3_capability.OCR3CapabilityTransmittedIterator, error)) *OCR3CapabilityInterface_FilterTransmitted_Call {
	_c.Call.Return(run)
	return _c
}

// LatestConfigDetails provides a mock function with given fields: opts
func (_m *OCR3CapabilityInterface) LatestConfigDetails(opts *bind.CallOpts) (ocr3_capability.LatestConfigDetails, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for LatestConfigDetails")
	}

	var r0 ocr3_capability.LatestConfigDetails
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) (ocr3_capability.LatestConfigDetails, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) ocr3_capability.LatestConfigDetails); ok {
		r0 = rf(opts)
	} else {
		r0 = ret.Get(0).(ocr3_capability.LatestConfigDetails)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OCR3CapabilityInterface_LatestConfigDetails_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LatestConfigDetails'
type OCR3CapabilityInterface_LatestConfigDetails_Call struct {
	*mock.Call
}

// LatestConfigDetails is a helper method to define mock.On call
//   - opts *bind.CallOpts
func (_e *OCR3CapabilityInterface_Expecter) LatestConfigDetails(opts interface{}) *OCR3CapabilityInterface_LatestConfigDetails_Call {
	return &OCR3CapabilityInterface_LatestConfigDetails_Call{Call: _e.mock.On("LatestConfigDetails", opts)}
}

func (_c *OCR3CapabilityInterface_LatestConfigDetails_Call) Run(run func(opts *bind.CallOpts)) *OCR3CapabilityInterface_LatestConfigDetails_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts))
	})
	return _c
}

func (_c *OCR3CapabilityInterface_LatestConfigDetails_Call) Return(_a0 ocr3_capability.LatestConfigDetails, _a1 error) *OCR3CapabilityInterface_LatestConfigDetails_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OCR3CapabilityInterface_LatestConfigDetails_Call) RunAndReturn(run func(*bind.CallOpts) (ocr3_capability.LatestConfigDetails, error)) *OCR3CapabilityInterface_LatestConfigDetails_Call {
	_c.Call.Return(run)
	return _c
}

// LatestConfigDigestAndEpoch provides a mock function with given fields: opts
func (_m *OCR3CapabilityInterface) LatestConfigDigestAndEpoch(opts *bind.CallOpts) (ocr3_capability.LatestConfigDigestAndEpoch, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for LatestConfigDigestAndEpoch")
	}

	var r0 ocr3_capability.LatestConfigDigestAndEpoch
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) (ocr3_capability.LatestConfigDigestAndEpoch, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) ocr3_capability.LatestConfigDigestAndEpoch); ok {
		r0 = rf(opts)
	} else {
		r0 = ret.Get(0).(ocr3_capability.LatestConfigDigestAndEpoch)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OCR3CapabilityInterface_LatestConfigDigestAndEpoch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LatestConfigDigestAndEpoch'
type OCR3CapabilityInterface_LatestConfigDigestAndEpoch_Call struct {
	*mock.Call
}

// LatestConfigDigestAndEpoch is a helper method to define mock.On call
//   - opts *bind.CallOpts
func (_e *OCR3CapabilityInterface_Expecter) LatestConfigDigestAndEpoch(opts interface{}) *OCR3CapabilityInterface_LatestConfigDigestAndEpoch_Call {
	return &OCR3CapabilityInterface_LatestConfigDigestAndEpoch_Call{Call: _e.mock.On("LatestConfigDigestAndEpoch", opts)}
}

func (_c *OCR3CapabilityInterface_LatestConfigDigestAndEpoch_Call) Run(run func(opts *bind.CallOpts)) *OCR3CapabilityInterface_LatestConfigDigestAndEpoch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts))
	})
	return _c
}

func (_c *OCR3CapabilityInterface_LatestConfigDigestAndEpoch_Call) Return(_a0 ocr3_capability.LatestConfigDigestAndEpoch, _a1 error) *OCR3CapabilityInterface_LatestConfigDigestAndEpoch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OCR3CapabilityInterface_LatestConfigDigestAndEpoch_Call) RunAndReturn(run func(*bind.CallOpts) (ocr3_capability.LatestConfigDigestAndEpoch, error)) *OCR3CapabilityInterface_LatestConfigDigestAndEpoch_Call {
	_c.Call.Return(run)
	return _c
}

// Owner provides a mock function with given fields: opts
func (_m *OCR3CapabilityInterface) Owner(opts *bind.CallOpts) (common.Address, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for Owner")
	}

	var r0 common.Address
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) (common.Address, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) common.Address); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Address)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OCR3CapabilityInterface_Owner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Owner'
type OCR3CapabilityInterface_Owner_Call struct {
	*mock.Call
}

// Owner is a helper method to define mock.On call
//   - opts *bind.CallOpts
func (_e *OCR3CapabilityInterface_Expecter) Owner(opts interface{}) *OCR3CapabilityInterface_Owner_Call {
	return &OCR3CapabilityInterface_Owner_Call{Call: _e.mock.On("Owner", opts)}
}

func (_c *OCR3CapabilityInterface_Owner_Call) Run(run func(opts *bind.CallOpts)) *OCR3CapabilityInterface_Owner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts))
	})
	return _c
}

func (_c *OCR3CapabilityInterface_Owner_Call) Return(_a0 common.Address, _a1 error) *OCR3CapabilityInterface_Owner_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OCR3CapabilityInterface_Owner_Call) RunAndReturn(run func(*bind.CallOpts) (common.Address, error)) *OCR3CapabilityInterface_Owner_Call {
	_c.Call.Return(run)
	return _c
}

// ParseConfigSet provides a mock function with given fields: log
func (_m *OCR3CapabilityInterface) ParseConfigSet(log types.Log) (*ocr3_capability.OCR3CapabilityConfigSet, error) {
	ret := _m.Called(log)

	if len(ret) == 0 {
		panic("no return value specified for ParseConfigSet")
	}

	var r0 *ocr3_capability.OCR3CapabilityConfigSet
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (*ocr3_capability.OCR3CapabilityConfigSet, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) *ocr3_capability.OCR3CapabilityConfigSet); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ocr3_capability.OCR3CapabilityConfigSet)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OCR3CapabilityInterface_ParseConfigSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseConfigSet'
type OCR3CapabilityInterface_ParseConfigSet_Call struct {
	*mock.Call
}

// ParseConfigSet is a helper method to define mock.On call
//   - log types.Log
func (_e *OCR3CapabilityInterface_Expecter) ParseConfigSet(log interface{}) *OCR3CapabilityInterface_ParseConfigSet_Call {
	return &OCR3CapabilityInterface_ParseConfigSet_Call{Call: _e.mock.On("ParseConfigSet", log)}
}

func (_c *OCR3CapabilityInterface_ParseConfigSet_Call) Run(run func(log types.Log)) *OCR3CapabilityInterface_ParseConfigSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Log))
	})
	return _c
}

func (_c *OCR3CapabilityInterface_ParseConfigSet_Call) Return(_a0 *ocr3_capability.OCR3CapabilityConfigSet, _a1 error) *OCR3CapabilityInterface_ParseConfigSet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OCR3CapabilityInterface_ParseConfigSet_Call) RunAndReturn(run func(types.Log) (*ocr3_capability.OCR3CapabilityConfigSet, error)) *OCR3CapabilityInterface_ParseConfigSet_Call {
	_c.Call.Return(run)
	return _c
}

// ParseLog provides a mock function with given fields: log
func (_m *OCR3CapabilityInterface) ParseLog(log types.Log) (generated.AbigenLog, error) {
	ret := _m.Called(log)

	if len(ret) == 0 {
		panic("no return value specified for ParseLog")
	}

	var r0 generated.AbigenLog
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (generated.AbigenLog, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) generated.AbigenLog); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(generated.AbigenLog)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OCR3CapabilityInterface_ParseLog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseLog'
type OCR3CapabilityInterface_ParseLog_Call struct {
	*mock.Call
}

// ParseLog is a helper method to define mock.On call
//   - log types.Log
func (_e *OCR3CapabilityInterface_Expecter) ParseLog(log interface{}) *OCR3CapabilityInterface_ParseLog_Call {
	return &OCR3CapabilityInterface_ParseLog_Call{Call: _e.mock.On("ParseLog", log)}
}

func (_c *OCR3CapabilityInterface_ParseLog_Call) Run(run func(log types.Log)) *OCR3CapabilityInterface_ParseLog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Log))
	})
	return _c
}

func (_c *OCR3CapabilityInterface_ParseLog_Call) Return(_a0 generated.AbigenLog, _a1 error) *OCR3CapabilityInterface_ParseLog_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OCR3CapabilityInterface_ParseLog_Call) RunAndReturn(run func(types.Log) (generated.AbigenLog, error)) *OCR3CapabilityInterface_ParseLog_Call {
	_c.Call.Return(run)
	return _c
}

// ParseOwnershipTransferRequested provides a mock function with given fields: log
func (_m *OCR3CapabilityInterface) ParseOwnershipTransferRequested(log types.Log) (*ocr3_capability.OCR3CapabilityOwnershipTransferRequested, error) {
	ret := _m.Called(log)

	if len(ret) == 0 {
		panic("no return value specified for ParseOwnershipTransferRequested")
	}

	var r0 *ocr3_capability.OCR3CapabilityOwnershipTransferRequested
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (*ocr3_capability.OCR3CapabilityOwnershipTransferRequested, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) *ocr3_capability.OCR3CapabilityOwnershipTransferRequested); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ocr3_capability.OCR3CapabilityOwnershipTransferRequested)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OCR3CapabilityInterface_ParseOwnershipTransferRequested_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseOwnershipTransferRequested'
type OCR3CapabilityInterface_ParseOwnershipTransferRequested_Call struct {
	*mock.Call
}

// ParseOwnershipTransferRequested is a helper method to define mock.On call
//   - log types.Log
func (_e *OCR3CapabilityInterface_Expecter) ParseOwnershipTransferRequested(log interface{}) *OCR3CapabilityInterface_ParseOwnershipTransferRequested_Call {
	return &OCR3CapabilityInterface_ParseOwnershipTransferRequested_Call{Call: _e.mock.On("ParseOwnershipTransferRequested", log)}
}

func (_c *OCR3CapabilityInterface_ParseOwnershipTransferRequested_Call) Run(run func(log types.Log)) *OCR3CapabilityInterface_ParseOwnershipTransferRequested_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Log))
	})
	return _c
}

func (_c *OCR3CapabilityInterface_ParseOwnershipTransferRequested_Call) Return(_a0 *ocr3_capability.OCR3CapabilityOwnershipTransferRequested, _a1 error) *OCR3CapabilityInterface_ParseOwnershipTransferRequested_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OCR3CapabilityInterface_ParseOwnershipTransferRequested_Call) RunAndReturn(run func(types.Log) (*ocr3_capability.OCR3CapabilityOwnershipTransferRequested, error)) *OCR3CapabilityInterface_ParseOwnershipTransferRequested_Call {
	_c.Call.Return(run)
	return _c
}

// ParseOwnershipTransferred provides a mock function with given fields: log
func (_m *OCR3CapabilityInterface) ParseOwnershipTransferred(log types.Log) (*ocr3_capability.OCR3CapabilityOwnershipTransferred, error) {
	ret := _m.Called(log)

	if len(ret) == 0 {
		panic("no return value specified for ParseOwnershipTransferred")
	}

	var r0 *ocr3_capability.OCR3CapabilityOwnershipTransferred
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (*ocr3_capability.OCR3CapabilityOwnershipTransferred, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) *ocr3_capability.OCR3CapabilityOwnershipTransferred); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ocr3_capability.OCR3CapabilityOwnershipTransferred)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OCR3CapabilityInterface_ParseOwnershipTransferred_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseOwnershipTransferred'
type OCR3CapabilityInterface_ParseOwnershipTransferred_Call struct {
	*mock.Call
}

// ParseOwnershipTransferred is a helper method to define mock.On call
//   - log types.Log
func (_e *OCR3CapabilityInterface_Expecter) ParseOwnershipTransferred(log interface{}) *OCR3CapabilityInterface_ParseOwnershipTransferred_Call {
	return &OCR3CapabilityInterface_ParseOwnershipTransferred_Call{Call: _e.mock.On("ParseOwnershipTransferred", log)}
}

func (_c *OCR3CapabilityInterface_ParseOwnershipTransferred_Call) Run(run func(log types.Log)) *OCR3CapabilityInterface_ParseOwnershipTransferred_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Log))
	})
	return _c
}

func (_c *OCR3CapabilityInterface_ParseOwnershipTransferred_Call) Return(_a0 *ocr3_capability.OCR3CapabilityOwnershipTransferred, _a1 error) *OCR3CapabilityInterface_ParseOwnershipTransferred_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OCR3CapabilityInterface_ParseOwnershipTransferred_Call) RunAndReturn(run func(types.Log) (*ocr3_capability.OCR3CapabilityOwnershipTransferred, error)) *OCR3CapabilityInterface_ParseOwnershipTransferred_Call {
	_c.Call.Return(run)
	return _c
}

// ParseTransmitted provides a mock function with given fields: log
func (_m *OCR3CapabilityInterface) ParseTransmitted(log types.Log) (*ocr3_capability.OCR3CapabilityTransmitted, error) {
	ret := _m.Called(log)

	if len(ret) == 0 {
		panic("no return value specified for ParseTransmitted")
	}

	var r0 *ocr3_capability.OCR3CapabilityTransmitted
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log) (*ocr3_capability.OCR3CapabilityTransmitted, error)); ok {
		return rf(log)
	}
	if rf, ok := ret.Get(0).(func(types.Log) *ocr3_capability.OCR3CapabilityTransmitted); ok {
		r0 = rf(log)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ocr3_capability.OCR3CapabilityTransmitted)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log) error); ok {
		r1 = rf(log)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OCR3CapabilityInterface_ParseTransmitted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseTransmitted'
type OCR3CapabilityInterface_ParseTransmitted_Call struct {
	*mock.Call
}

// ParseTransmitted is a helper method to define mock.On call
//   - log types.Log
func (_e *OCR3CapabilityInterface_Expecter) ParseTransmitted(log interface{}) *OCR3CapabilityInterface_ParseTransmitted_Call {
	return &OCR3CapabilityInterface_ParseTransmitted_Call{Call: _e.mock.On("ParseTransmitted", log)}
}

func (_c *OCR3CapabilityInterface_ParseTransmitted_Call) Run(run func(log types.Log)) *OCR3CapabilityInterface_ParseTransmitted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Log))
	})
	return _c
}

func (_c *OCR3CapabilityInterface_ParseTransmitted_Call) Return(_a0 *ocr3_capability.OCR3CapabilityTransmitted, _a1 error) *OCR3CapabilityInterface_ParseTransmitted_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OCR3CapabilityInterface_ParseTransmitted_Call) RunAndReturn(run func(types.Log) (*ocr3_capability.OCR3CapabilityTransmitted, error)) *OCR3CapabilityInterface_ParseTransmitted_Call {
	_c.Call.Return(run)
	return _c
}

// SetConfig provides a mock function with given fields: opts, _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig
func (_m *OCR3CapabilityInterface) SetConfig(opts *bind.TransactOpts, _signers [][]byte, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte) (*types.Transaction, error) {
	ret := _m.Called(opts, _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)

	if len(ret) == 0 {
		panic("no return value specified for SetConfig")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, [][]byte, []common.Address, uint8, []byte, uint64, []byte) (*types.Transaction, error)); ok {
		return rf(opts, _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, [][]byte, []common.Address, uint8, []byte, uint64, []byte) *types.Transaction); ok {
		r0 = rf(opts, _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, [][]byte, []common.Address, uint8, []byte, uint64, []byte) error); ok {
		r1 = rf(opts, _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OCR3CapabilityInterface_SetConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetConfig'
type OCR3CapabilityInterface_SetConfig_Call struct {
	*mock.Call
}

// SetConfig is a helper method to define mock.On call
//   - opts *bind.TransactOpts
//   - _signers [][]byte
//   - _transmitters []common.Address
//   - _f uint8
//   - _onchainConfig []byte
//   - _offchainConfigVersion uint64
//   - _offchainConfig []byte
func (_e *OCR3CapabilityInterface_Expecter) SetConfig(opts interface{}, _signers interface{}, _transmitters interface{}, _f interface{}, _onchainConfig interface{}, _offchainConfigVersion interface{}, _offchainConfig interface{}) *OCR3CapabilityInterface_SetConfig_Call {
	return &OCR3CapabilityInterface_SetConfig_Call{Call: _e.mock.On("SetConfig", opts, _signers, _transmitters, _f, _onchainConfig, _offchainConfigVersion, _offchainConfig)}
}

func (_c *OCR3CapabilityInterface_SetConfig_Call) Run(run func(opts *bind.TransactOpts, _signers [][]byte, _transmitters []common.Address, _f uint8, _onchainConfig []byte, _offchainConfigVersion uint64, _offchainConfig []byte)) *OCR3CapabilityInterface_SetConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts), args[1].([][]byte), args[2].([]common.Address), args[3].(uint8), args[4].([]byte), args[5].(uint64), args[6].([]byte))
	})
	return _c
}

func (_c *OCR3CapabilityInterface_SetConfig_Call) Return(_a0 *types.Transaction, _a1 error) *OCR3CapabilityInterface_SetConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OCR3CapabilityInterface_SetConfig_Call) RunAndReturn(run func(*bind.TransactOpts, [][]byte, []common.Address, uint8, []byte, uint64, []byte) (*types.Transaction, error)) *OCR3CapabilityInterface_SetConfig_Call {
	_c.Call.Return(run)
	return _c
}

// TransferOwnership provides a mock function with given fields: opts, to
func (_m *OCR3CapabilityInterface) TransferOwnership(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	ret := _m.Called(opts, to)

	if len(ret) == 0 {
		panic("no return value specified for TransferOwnership")
	}

	var r0 *types.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address) (*types.Transaction, error)); ok {
		return rf(opts, to)
	}
	if rf, ok := ret.Get(0).(func(*bind.TransactOpts, common.Address) *types.Transaction); ok {
		r0 = rf(opts, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.TransactOpts, common.Address) error); ok {
		r1 = rf(opts, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OCR3CapabilityInterface_TransferOwnership_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransferOwnership'
type OCR3CapabilityInterface_TransferOwnership_Call struct {
	*mock.Call
}

// TransferOwnership is a helper method to define mock.On call
//   - opts *bind.TransactOpts
//   - to common.Address
func (_e *OCR3CapabilityInterface_Expecter) TransferOwnership(opts interface{}, to interface{}) *OCR3CapabilityInterface_TransferOwnership_Call {
	return &OCR3CapabilityInterface_TransferOwnership_Call{Call: _e.mock.On("TransferOwnership", opts, to)}
}

func (_c *OCR3CapabilityInterface_TransferOwnership_Call) Run(run func(opts *bind.TransactOpts, to common.Address)) *OCR3CapabilityInterface_TransferOwnership_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.TransactOpts), args[1].(common.Address))
	})
	return _c
}

func (_c *OCR3CapabilityInterface_TransferOwnership_Call) Return(_a0 *types.Transaction, _a1 error) *OCR3CapabilityInterface_TransferOwnership_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OCR3CapabilityInterface_TransferOwnership_Call) RunAndReturn(run func(*bind.TransactOpts, common.Address) (*types.Transaction, error)) *OCR3CapabilityInterface_TransferOwnership_Call {
	_c.Call.Return(run)
	return _c
}

// Transmit provides a mock function with given fields: opts, arg0, arg1, arg2, arg3, arg4
func (_m *OCR3CapabilityInterface) Transmit(opts *bind.CallOpts, arg0 [3][32]byte, arg1 []byte, arg2 [][32]byte, arg3 [][32]byte, arg4 [32]byte) error {
	ret := _m.Called(opts, arg0, arg1, arg2, arg3, arg4)

	if len(ret) == 0 {
		panic("no return value specified for Transmit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts, [3][32]byte, []byte, [][32]byte, [][32]byte, [32]byte) error); ok {
		r0 = rf(opts, arg0, arg1, arg2, arg3, arg4)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OCR3CapabilityInterface_Transmit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transmit'
type OCR3CapabilityInterface_Transmit_Call struct {
	*mock.Call
}

// Transmit is a helper method to define mock.On call
//   - opts *bind.CallOpts
//   - arg0 [3][32]byte
//   - arg1 []byte
//   - arg2 [][32]byte
//   - arg3 [][32]byte
//   - arg4 [32]byte
func (_e *OCR3CapabilityInterface_Expecter) Transmit(opts interface{}, arg0 interface{}, arg1 interface{}, arg2 interface{}, arg3 interface{}, arg4 interface{}) *OCR3CapabilityInterface_Transmit_Call {
	return &OCR3CapabilityInterface_Transmit_Call{Call: _e.mock.On("Transmit", opts, arg0, arg1, arg2, arg3, arg4)}
}

func (_c *OCR3CapabilityInterface_Transmit_Call) Run(run func(opts *bind.CallOpts, arg0 [3][32]byte, arg1 []byte, arg2 [][32]byte, arg3 [][32]byte, arg4 [32]byte)) *OCR3CapabilityInterface_Transmit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts), args[1].([3][32]byte), args[2].([]byte), args[3].([][32]byte), args[4].([][32]byte), args[5].([32]byte))
	})
	return _c
}

func (_c *OCR3CapabilityInterface_Transmit_Call) Return(_a0 error) *OCR3CapabilityInterface_Transmit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OCR3CapabilityInterface_Transmit_Call) RunAndReturn(run func(*bind.CallOpts, [3][32]byte, []byte, [][32]byte, [][32]byte, [32]byte) error) *OCR3CapabilityInterface_Transmit_Call {
	_c.Call.Return(run)
	return _c
}

// TypeAndVersion provides a mock function with given fields: opts
func (_m *OCR3CapabilityInterface) TypeAndVersion(opts *bind.CallOpts) (string, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for TypeAndVersion")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) (string, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) string); ok {
		r0 = rf(opts)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OCR3CapabilityInterface_TypeAndVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TypeAndVersion'
type OCR3CapabilityInterface_TypeAndVersion_Call struct {
	*mock.Call
}

// TypeAndVersion is a helper method to define mock.On call
//   - opts *bind.CallOpts
func (_e *OCR3CapabilityInterface_Expecter) TypeAndVersion(opts interface{}) *OCR3CapabilityInterface_TypeAndVersion_Call {
	return &OCR3CapabilityInterface_TypeAndVersion_Call{Call: _e.mock.On("TypeAndVersion", opts)}
}

func (_c *OCR3CapabilityInterface_TypeAndVersion_Call) Run(run func(opts *bind.CallOpts)) *OCR3CapabilityInterface_TypeAndVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts))
	})
	return _c
}

func (_c *OCR3CapabilityInterface_TypeAndVersion_Call) Return(_a0 string, _a1 error) *OCR3CapabilityInterface_TypeAndVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OCR3CapabilityInterface_TypeAndVersion_Call) RunAndReturn(run func(*bind.CallOpts) (string, error)) *OCR3CapabilityInterface_TypeAndVersion_Call {
	_c.Call.Return(run)
	return _c
}

// WatchConfigSet provides a mock function with given fields: opts, sink
func (_m *OCR3CapabilityInterface) WatchConfigSet(opts *bind.WatchOpts, sink chan<- *ocr3_capability.OCR3CapabilityConfigSet) (event.Subscription, error) {
	ret := _m.Called(opts, sink)

	if len(ret) == 0 {
		panic("no return value specified for WatchConfigSet")
	}

	var r0 event.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *ocr3_capability.OCR3CapabilityConfigSet) (event.Subscription, error)); ok {
		return rf(opts, sink)
	}
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *ocr3_capability.OCR3CapabilityConfigSet) event.Subscription); ok {
		r0 = rf(opts, sink)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *ocr3_capability.OCR3CapabilityConfigSet) error); ok {
		r1 = rf(opts, sink)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OCR3CapabilityInterface_WatchConfigSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchConfigSet'
type OCR3CapabilityInterface_WatchConfigSet_Call struct {
	*mock.Call
}

// WatchConfigSet is a helper method to define mock.On call
//   - opts *bind.WatchOpts
//   - sink chan<- *ocr3_capability.OCR3CapabilityConfigSet
func (_e *OCR3CapabilityInterface_Expecter) WatchConfigSet(opts interface{}, sink interface{}) *OCR3CapabilityInterface_WatchConfigSet_Call {
	return &OCR3CapabilityInterface_WatchConfigSet_Call{Call: _e.mock.On("WatchConfigSet", opts, sink)}
}

func (_c *OCR3CapabilityInterface_WatchConfigSet_Call) Run(run func(opts *bind.WatchOpts, sink chan<- *ocr3_capability.OCR3CapabilityConfigSet)) *OCR3CapabilityInterface_WatchConfigSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.WatchOpts), args[1].(chan<- *ocr3_capability.OCR3CapabilityConfigSet))
	})
	return _c
}

func (_c *OCR3CapabilityInterface_WatchConfigSet_Call) Return(_a0 event.Subscription, _a1 error) *OCR3CapabilityInterface_WatchConfigSet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OCR3CapabilityInterface_WatchConfigSet_Call) RunAndReturn(run func(*bind.WatchOpts, chan<- *ocr3_capability.OCR3CapabilityConfigSet) (event.Subscription, error)) *OCR3CapabilityInterface_WatchConfigSet_Call {
	_c.Call.Return(run)
	return _c
}

// WatchOwnershipTransferRequested provides a mock function with given fields: opts, sink, from, to
func (_m *OCR3CapabilityInterface) WatchOwnershipTransferRequested(opts *bind.WatchOpts, sink chan<- *ocr3_capability.OCR3CapabilityOwnershipTransferRequested, from []common.Address, to []common.Address) (event.Subscription, error) {
	ret := _m.Called(opts, sink, from, to)

	if len(ret) == 0 {
		panic("no return value specified for WatchOwnershipTransferRequested")
	}

	var r0 event.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *ocr3_capability.OCR3CapabilityOwnershipTransferRequested, []common.Address, []common.Address) (event.Subscription, error)); ok {
		return rf(opts, sink, from, to)
	}
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *ocr3_capability.OCR3CapabilityOwnershipTransferRequested, []common.Address, []common.Address) event.Subscription); ok {
		r0 = rf(opts, sink, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *ocr3_capability.OCR3CapabilityOwnershipTransferRequested, []common.Address, []common.Address) error); ok {
		r1 = rf(opts, sink, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OCR3CapabilityInterface_WatchOwnershipTransferRequested_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchOwnershipTransferRequested'
type OCR3CapabilityInterface_WatchOwnershipTransferRequested_Call struct {
	*mock.Call
}

// WatchOwnershipTransferRequested is a helper method to define mock.On call
//   - opts *bind.WatchOpts
//   - sink chan<- *ocr3_capability.OCR3CapabilityOwnershipTransferRequested
//   - from []common.Address
//   - to []common.Address
func (_e *OCR3CapabilityInterface_Expecter) WatchOwnershipTransferRequested(opts interface{}, sink interface{}, from interface{}, to interface{}) *OCR3CapabilityInterface_WatchOwnershipTransferRequested_Call {
	return &OCR3CapabilityInterface_WatchOwnershipTransferRequested_Call{Call: _e.mock.On("WatchOwnershipTransferRequested", opts, sink, from, to)}
}

func (_c *OCR3CapabilityInterface_WatchOwnershipTransferRequested_Call) Run(run func(opts *bind.WatchOpts, sink chan<- *ocr3_capability.OCR3CapabilityOwnershipTransferRequested, from []common.Address, to []common.Address)) *OCR3CapabilityInterface_WatchOwnershipTransferRequested_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.WatchOpts), args[1].(chan<- *ocr3_capability.OCR3CapabilityOwnershipTransferRequested), args[2].([]common.Address), args[3].([]common.Address))
	})
	return _c
}

func (_c *OCR3CapabilityInterface_WatchOwnershipTransferRequested_Call) Return(_a0 event.Subscription, _a1 error) *OCR3CapabilityInterface_WatchOwnershipTransferRequested_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OCR3CapabilityInterface_WatchOwnershipTransferRequested_Call) RunAndReturn(run func(*bind.WatchOpts, chan<- *ocr3_capability.OCR3CapabilityOwnershipTransferRequested, []common.Address, []common.Address) (event.Subscription, error)) *OCR3CapabilityInterface_WatchOwnershipTransferRequested_Call {
	_c.Call.Return(run)
	return _c
}

// WatchOwnershipTransferred provides a mock function with given fields: opts, sink, from, to
func (_m *OCR3CapabilityInterface) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ocr3_capability.OCR3CapabilityOwnershipTransferred, from []common.Address, to []common.Address) (event.Subscription, error) {
	ret := _m.Called(opts, sink, from, to)

	if len(ret) == 0 {
		panic("no return value specified for WatchOwnershipTransferred")
	}

	var r0 event.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *ocr3_capability.OCR3CapabilityOwnershipTransferred, []common.Address, []common.Address) (event.Subscription, error)); ok {
		return rf(opts, sink, from, to)
	}
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *ocr3_capability.OCR3CapabilityOwnershipTransferred, []common.Address, []common.Address) event.Subscription); ok {
		r0 = rf(opts, sink, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *ocr3_capability.OCR3CapabilityOwnershipTransferred, []common.Address, []common.Address) error); ok {
		r1 = rf(opts, sink, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OCR3CapabilityInterface_WatchOwnershipTransferred_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchOwnershipTransferred'
type OCR3CapabilityInterface_WatchOwnershipTransferred_Call struct {
	*mock.Call
}

// WatchOwnershipTransferred is a helper method to define mock.On call
//   - opts *bind.WatchOpts
//   - sink chan<- *ocr3_capability.OCR3CapabilityOwnershipTransferred
//   - from []common.Address
//   - to []common.Address
func (_e *OCR3CapabilityInterface_Expecter) WatchOwnershipTransferred(opts interface{}, sink interface{}, from interface{}, to interface{}) *OCR3CapabilityInterface_WatchOwnershipTransferred_Call {
	return &OCR3CapabilityInterface_WatchOwnershipTransferred_Call{Call: _e.mock.On("WatchOwnershipTransferred", opts, sink, from, to)}
}

func (_c *OCR3CapabilityInterface_WatchOwnershipTransferred_Call) Run(run func(opts *bind.WatchOpts, sink chan<- *ocr3_capability.OCR3CapabilityOwnershipTransferred, from []common.Address, to []common.Address)) *OCR3CapabilityInterface_WatchOwnershipTransferred_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.WatchOpts), args[1].(chan<- *ocr3_capability.OCR3CapabilityOwnershipTransferred), args[2].([]common.Address), args[3].([]common.Address))
	})
	return _c
}

func (_c *OCR3CapabilityInterface_WatchOwnershipTransferred_Call) Return(_a0 event.Subscription, _a1 error) *OCR3CapabilityInterface_WatchOwnershipTransferred_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OCR3CapabilityInterface_WatchOwnershipTransferred_Call) RunAndReturn(run func(*bind.WatchOpts, chan<- *ocr3_capability.OCR3CapabilityOwnershipTransferred, []common.Address, []common.Address) (event.Subscription, error)) *OCR3CapabilityInterface_WatchOwnershipTransferred_Call {
	_c.Call.Return(run)
	return _c
}

// WatchTransmitted provides a mock function with given fields: opts, sink
func (_m *OCR3CapabilityInterface) WatchTransmitted(opts *bind.WatchOpts, sink chan<- *ocr3_capability.OCR3CapabilityTransmitted) (event.Subscription, error) {
	ret := _m.Called(opts, sink)

	if len(ret) == 0 {
		panic("no return value specified for WatchTransmitted")
	}

	var r0 event.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *ocr3_capability.OCR3CapabilityTransmitted) (event.Subscription, error)); ok {
		return rf(opts, sink)
	}
	if rf, ok := ret.Get(0).(func(*bind.WatchOpts, chan<- *ocr3_capability.OCR3CapabilityTransmitted) event.Subscription); ok {
		r0 = rf(opts, sink)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(event.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.WatchOpts, chan<- *ocr3_capability.OCR3CapabilityTransmitted) error); ok {
		r1 = rf(opts, sink)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OCR3CapabilityInterface_WatchTransmitted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchTransmitted'
type OCR3CapabilityInterface_WatchTransmitted_Call struct {
	*mock.Call
}

// WatchTransmitted is a helper method to define mock.On call
//   - opts *bind.WatchOpts
//   - sink chan<- *ocr3_capability.OCR3CapabilityTransmitted
func (_e *OCR3CapabilityInterface_Expecter) WatchTransmitted(opts interface{}, sink interface{}) *OCR3CapabilityInterface_WatchTransmitted_Call {
	return &OCR3CapabilityInterface_WatchTransmitted_Call{Call: _e.mock.On("WatchTransmitted", opts, sink)}
}

func (_c *OCR3CapabilityInterface_WatchTransmitted_Call) Run(run func(opts *bind.WatchOpts, sink chan<- *ocr3_capability.OCR3CapabilityTransmitted)) *OCR3CapabilityInterface_WatchTransmitted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.WatchOpts), args[1].(chan<- *ocr3_capability.OCR3CapabilityTransmitted))
	})
	return _c
}

func (_c *OCR3CapabilityInterface_WatchTransmitted_Call) Return(_a0 event.Subscription, _a1 error) *OCR3CapabilityInterface_WatchTransmitted_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OCR3CapabilityInterface_WatchTransmitted_Call) RunAndReturn(run func(*bind.WatchOpts, chan<- *ocr3_capability.OCR3CapabilityTransmitted) (event.Subscription, error)) *OCR3CapabilityInterface_WatchTransmitted_Call {
	_c.Call.Return(run)
	return _c
}

// NewOCR3CapabilityInterface creates a new instance of OCR3CapabilityInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOCR3CapabilityInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *OCR3CapabilityInterface {
	mock := &OCR3CapabilityInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
