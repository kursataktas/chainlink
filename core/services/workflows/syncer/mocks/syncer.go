// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Syncer is an autogenerated mock type for the Syncer type
type Syncer struct {
	mock.Mock
}

type Syncer_Expecter struct {
	mock *mock.Mock
}

func (_m *Syncer) EXPECT() *Syncer_Expecter {
	return &Syncer_Expecter{mock: &_m.Mock}
}

// Sync provides a mock function with given fields: ctx, isInitialSync
func (_m *Syncer) Sync(ctx context.Context, isInitialSync bool) error {
	ret := _m.Called(ctx, isInitialSync)

	if len(ret) == 0 {
		panic("no return value specified for Sync")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, bool) error); ok {
		r0 = rf(ctx, isInitialSync)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Syncer_Sync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sync'
type Syncer_Sync_Call struct {
	*mock.Call
}

// Sync is a helper method to define mock.On call
//   - ctx context.Context
//   - isInitialSync bool
func (_e *Syncer_Expecter) Sync(ctx interface{}, isInitialSync interface{}) *Syncer_Sync_Call {
	return &Syncer_Sync_Call{Call: _e.mock.On("Sync", ctx, isInitialSync)}
}

func (_c *Syncer_Sync_Call) Run(run func(ctx context.Context, isInitialSync bool)) *Syncer_Sync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bool))
	})
	return _c
}

func (_c *Syncer_Sync_Call) Return(_a0 error) *Syncer_Sync_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Syncer_Sync_Call) RunAndReturn(run func(context.Context, bool) error) *Syncer_Sync_Call {
	_c.Call.Return(run)
	return _c
}

// NewSyncer creates a new instance of Syncer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSyncer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Syncer {
	mock := &Syncer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
